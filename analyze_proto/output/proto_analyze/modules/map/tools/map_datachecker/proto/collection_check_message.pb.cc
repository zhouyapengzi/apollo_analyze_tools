// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/tools/map_datachecker/proto/collection_check_message.proto

#include "modules/map/tools/map_datachecker/proto/collection_check_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameRate_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoopResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopicResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VerifyRange_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VerifyResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
namespace apollo {
namespace hdmap {
class VerifyRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerifyRange> _instance;
} _VerifyRange_default_instance_;
class LoopResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoopResult> _instance;
} _LoopResult_default_instance_;
class TopicResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopicResult> _instance;
} _TopicResult_default_instance_;
class FrameRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameRate> _instance;
} _FrameRate_default_instance_;
class VerifyResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerifyResult> _instance;
} _VerifyResult_default_instance_;
class ChannelVerifyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelVerifyRequest> _instance;
} _ChannelVerifyRequest_default_instance_;
class ChannelVerifyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelVerifyResponse> _instance;
} _ChannelVerifyResponse_default_instance_;
class LoopsVerifyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoopsVerifyRequest> _instance;
} _LoopsVerifyRequest_default_instance_;
class LoopsVerifyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoopsVerifyResponse> _instance;
} _LoopsVerifyResponse_default_instance_;
class DynamicAlignRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DynamicAlignRequest> _instance;
} _DynamicAlignRequest_default_instance_;
class DynamicAlignResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DynamicAlignResponse> _instance;
} _DynamicAlignResponse_default_instance_;
class StaticAlignRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StaticAlignRequest> _instance;
} _StaticAlignRequest_default_instance_;
class StaticAlignResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StaticAlignResponse> _instance;
} _StaticAlignResponse_default_instance_;
class EightRouteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EightRouteRequest> _instance;
} _EightRouteRequest_default_instance_;
class EightRouteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EightRouteResponse> _instance;
} _EightRouteResponse_default_instance_;
}  // namespace hdmap
}  // namespace apollo
static void InitDefaultsscc_info_ChannelVerifyRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_ChannelVerifyRequest_default_instance_;
    new (ptr) ::apollo::hdmap::ChannelVerifyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::ChannelVerifyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelVerifyRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelVerifyRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_ChannelVerifyResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_ChannelVerifyResponse_default_instance_;
    new (ptr) ::apollo::hdmap::ChannelVerifyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::ChannelVerifyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelVerifyResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChannelVerifyResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto}, {
      &scc_info_VerifyResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_DynamicAlignRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_DynamicAlignRequest_default_instance_;
    new (ptr) ::apollo::hdmap::DynamicAlignRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::DynamicAlignRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DynamicAlignRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DynamicAlignRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_DynamicAlignResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_DynamicAlignResponse_default_instance_;
    new (ptr) ::apollo::hdmap::DynamicAlignResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::DynamicAlignResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DynamicAlignResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DynamicAlignResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_EightRouteRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_EightRouteRequest_default_instance_;
    new (ptr) ::apollo::hdmap::EightRouteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::EightRouteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EightRouteRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EightRouteRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_EightRouteResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_EightRouteResponse_default_instance_;
    new (ptr) ::apollo::hdmap::EightRouteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::EightRouteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EightRouteResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EightRouteResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_FrameRate_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_FrameRate_default_instance_;
    new (ptr) ::apollo::hdmap::FrameRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::FrameRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FrameRate_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FrameRate_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_LoopResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_LoopResult_default_instance_;
    new (ptr) ::apollo::hdmap::LoopResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::LoopResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoopResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoopResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_LoopsVerifyRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_LoopsVerifyRequest_default_instance_;
    new (ptr) ::apollo::hdmap::LoopsVerifyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::LoopsVerifyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoopsVerifyRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoopsVerifyRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto}, {
      &scc_info_VerifyRange_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_LoopsVerifyResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_LoopsVerifyResponse_default_instance_;
    new (ptr) ::apollo::hdmap::LoopsVerifyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::LoopsVerifyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoopsVerifyResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoopsVerifyResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto}, {
      &scc_info_LoopResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base,}};

static void InitDefaultsscc_info_StaticAlignRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_StaticAlignRequest_default_instance_;
    new (ptr) ::apollo::hdmap::StaticAlignRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::StaticAlignRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StaticAlignRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StaticAlignRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_StaticAlignResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_StaticAlignResponse_default_instance_;
    new (ptr) ::apollo::hdmap::StaticAlignResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::StaticAlignResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StaticAlignResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StaticAlignResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_TopicResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_TopicResult_default_instance_;
    new (ptr) ::apollo::hdmap::TopicResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::TopicResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopicResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TopicResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_VerifyRange_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_VerifyRange_default_instance_;
    new (ptr) ::apollo::hdmap::VerifyRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::VerifyRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VerifyRange_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VerifyRange_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_VerifyResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::apollo::hdmap::_VerifyResult_default_instance_;
    new (ptr) ::apollo::hdmap::VerifyResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::apollo::hdmap::VerifyResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VerifyResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VerifyResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto}, {
      &scc_info_TopicResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base,
      &scc_info_FrameRate_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::VerifyRange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::VerifyRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::VerifyRange, start_time_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::VerifyRange, end_time_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopResult, is_reached_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopResult, loop_num_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::TopicResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::TopicResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::TopicResult, topic_lack_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::FrameRate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::FrameRate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::FrameRate, topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::FrameRate, expected_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::FrameRate, current_rate_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::FrameRate, bad_record_name_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::VerifyResult, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::VerifyResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::VerifyResult, topics_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::VerifyResult, rates_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ChannelVerifyRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ChannelVerifyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ChannelVerifyRequest, cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ChannelVerifyRequest, collect_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ChannelVerifyRequest, path_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ChannelVerifyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ChannelVerifyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ChannelVerifyResponse, code_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::ChannelVerifyResponse, result_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopsVerifyRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopsVerifyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopsVerifyRequest, cmd_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopsVerifyRequest, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopsVerifyRequest, range_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopsVerifyResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopsVerifyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopsVerifyResponse, code_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopsVerifyResponse, progress_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::LoopsVerifyResponse, loop_result_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::DynamicAlignRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::DynamicAlignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::DynamicAlignRequest, cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::DynamicAlignResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::DynamicAlignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::DynamicAlignResponse, code_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::DynamicAlignResponse, progress_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::StaticAlignRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::StaticAlignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::StaticAlignRequest, cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::StaticAlignResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::StaticAlignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::StaticAlignResponse, code_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::StaticAlignResponse, progress_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::EightRouteRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::EightRouteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::EightRouteRequest, cmd_),
  0,
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::EightRouteResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::EightRouteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::EightRouteResponse, code_),
  PROTOBUF_FIELD_OFFSET(::apollo::hdmap::EightRouteResponse, progress_),
  1,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::apollo::hdmap::VerifyRange)},
  { 9, 16, sizeof(::apollo::hdmap::LoopResult)},
  { 18, 24, sizeof(::apollo::hdmap::TopicResult)},
  { 25, 34, sizeof(::apollo::hdmap::FrameRate)},
  { 38, 45, sizeof(::apollo::hdmap::VerifyResult)},
  { 47, 55, sizeof(::apollo::hdmap::ChannelVerifyRequest)},
  { 58, 65, sizeof(::apollo::hdmap::ChannelVerifyResponse)},
  { 67, 75, sizeof(::apollo::hdmap::LoopsVerifyRequest)},
  { 78, 86, sizeof(::apollo::hdmap::LoopsVerifyResponse)},
  { 89, 95, sizeof(::apollo::hdmap::DynamicAlignRequest)},
  { 96, 103, sizeof(::apollo::hdmap::DynamicAlignResponse)},
  { 105, 111, sizeof(::apollo::hdmap::StaticAlignRequest)},
  { 112, 119, sizeof(::apollo::hdmap::StaticAlignResponse)},
  { 121, 127, sizeof(::apollo::hdmap::EightRouteRequest)},
  { 128, 135, sizeof(::apollo::hdmap::EightRouteResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_VerifyRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_LoopResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_TopicResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_FrameRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_VerifyResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_ChannelVerifyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_ChannelVerifyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_LoopsVerifyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_LoopsVerifyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_DynamicAlignRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_DynamicAlignResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_StaticAlignRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_StaticAlignResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_EightRouteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::hdmap::_EightRouteResponse_default_instance_),
};

const char descriptor_table_protodef_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nFmodules/map/tools/map_datachecker/prot"
  "o/collection_check_message.proto\022\014apollo"
  ".hdmap\032Cmodules/map/tools/map_datachecke"
  "r/proto/collection_error_code.proto\"3\n\013V"
  "erifyRange\022\022\n\nstart_time\030\001 \001(\001\022\020\n\010end_ti"
  "me\030\002 \001(\001\"2\n\nLoopResult\022\022\n\nis_reached\030\001 \002"
  "(\010\022\020\n\010loop_num\030\002 \001(\001\"!\n\013TopicResult\022\022\n\nt"
  "opic_lack\030\001 \003(\t\"`\n\tFrameRate\022\r\n\005topic\030\001 "
  "\001(\t\022\025\n\rexpected_rate\030\002 \001(\001\022\024\n\014current_ra"
  "te\030\003 \001(\001\022\027\n\017bad_record_name\030\004 \003(\t\"a\n\014Ver"
  "ifyResult\022)\n\006topics\030\001 \001(\0132\031.apollo.hdmap"
  ".TopicResult\022&\n\005rates\030\002 \003(\0132\027.apollo.hdm"
  "ap.FrameRate\"\\\n\024ChannelVerifyRequest\022\"\n\003"
  "cmd\030\001 \001(\0162\025.apollo.hdmap.CmdType\022\022\n\ncoll"
  "ect_id\030\002 \001(\t\022\014\n\004path\030\003 \001(\t\"j\n\025ChannelVer"
  "ifyResponse\022%\n\004code\030\001 \001(\0162\027.apollo.hdmap"
  ".ErrorCode\022*\n\006result\030\002 \001(\0132\032.apollo.hdma"
  "p.VerifyResult\"\210\001\n\022LoopsVerifyRequest\022\"\n"
  "\003cmd\030\001 \001(\0162\025.apollo.hdmap.CmdType\022$\n\004typ"
  "e\030\002 \001(\0162\026.apollo.hdmap.DataType\022(\n\005range"
  "\030\003 \003(\0132\031.apollo.hdmap.VerifyRange\"}\n\023Loo"
  "psVerifyResponse\022%\n\004code\030\001 \001(\0162\027.apollo."
  "hdmap.ErrorCode\022\020\n\010progress\030\002 \001(\001\022-\n\013loo"
  "p_result\030\003 \001(\0132\030.apollo.hdmap.LoopResult"
  "\"9\n\023DynamicAlignRequest\022\"\n\003cmd\030\001 \001(\0162\025.a"
  "pollo.hdmap.CmdType\"O\n\024DynamicAlignRespo"
  "nse\022%\n\004code\030\001 \001(\0162\027.apollo.hdmap.ErrorCo"
  "de\022\020\n\010progress\030\002 \001(\001\"8\n\022StaticAlignReque"
  "st\022\"\n\003cmd\030\001 \001(\0162\025.apollo.hdmap.CmdType\"N"
  "\n\023StaticAlignResponse\022%\n\004code\030\001 \001(\0162\027.ap"
  "ollo.hdmap.ErrorCode\022\020\n\010progress\030\002 \001(\001\"7"
  "\n\021EightRouteRequest\022\"\n\003cmd\030\001 \001(\0162\025.apoll"
  "o.hdmap.CmdType\"M\n\022EightRouteResponse\022%\n"
  "\004code\030\001 \001(\0162\027.apollo.hdmap.ErrorCode\022\020\n\010"
  "progress\030\002 \001(\001*)\n\007CmdType\022\t\n\005START\020\001\022\t\n\005"
  "CHECK\020\002\022\010\n\004STOP\020\003*,\n\010DataType\022\016\n\nMAP_MAK"
  "ING\020\001\022\020\n\014MAP_CHECKOUT\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_deps[1] = {
  &::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5ferror_5fcode_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_sccs[15] = {
  &scc_info_ChannelVerifyRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base,
  &scc_info_ChannelVerifyResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base,
  &scc_info_DynamicAlignRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base,
  &scc_info_DynamicAlignResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base,
  &scc_info_EightRouteRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base,
  &scc_info_EightRouteResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base,
  &scc_info_FrameRate_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base,
  &scc_info_LoopResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base,
  &scc_info_LoopsVerifyRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base,
  &scc_info_LoopsVerifyResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base,
  &scc_info_StaticAlignRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base,
  &scc_info_StaticAlignResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base,
  &scc_info_TopicResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base,
  &scc_info_VerifyRange_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base,
  &scc_info_VerifyResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_once;
static bool descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto = {
  &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_initialized, descriptor_table_protodef_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto, "modules/map/tools/map_datachecker/proto/collection_check_message.proto", 1463,
  &descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_once, descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_sccs, descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto_deps, 15, 1,
  schemas, file_default_instances, TableStruct_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto::offsets,
  file_level_metadata_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto, 15, file_level_enum_descriptors_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto, file_level_service_descriptors_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto), true);
namespace apollo {
namespace hdmap {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto);
  return file_level_enum_descriptors_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[0];
}
bool CmdType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto);
  return file_level_enum_descriptors_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto[1];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void VerifyRange::InitAsDefaultInstance() {
}
class VerifyRange::_Internal {
 public:
  using HasBits = decltype(std::declval<VerifyRange>()._has_bits_);
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

VerifyRange::VerifyRange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.VerifyRange)
}
VerifyRange::VerifyRange(const VerifyRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.VerifyRange)
}

void VerifyRange::SharedCtor() {
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
}

VerifyRange::~VerifyRange() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.VerifyRange)
  SharedDtor();
}

void VerifyRange::SharedDtor() {
}

void VerifyRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerifyRange& VerifyRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerifyRange_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void VerifyRange::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.VerifyRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&start_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_time_) -
        reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VerifyRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional double start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_start_time(&has_bits);
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_end_time(&has_bits);
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerifyRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.VerifyRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double start_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_start_time(), target);
  }

  // optional double end_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_end_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.VerifyRange)
  return target;
}

size_t VerifyRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.VerifyRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double start_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double end_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.VerifyRange)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerifyRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.VerifyRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.VerifyRange)
    MergeFrom(*source);
  }
}

void VerifyRange::MergeFrom(const VerifyRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.VerifyRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      end_time_ = from.end_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VerifyRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.VerifyRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyRange::CopyFrom(const VerifyRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.VerifyRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyRange::IsInitialized() const {
  return true;
}

void VerifyRange::InternalSwap(VerifyRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoopResult::InitAsDefaultInstance() {
}
class LoopResult::_Internal {
 public:
  using HasBits = decltype(std::declval<LoopResult>()._has_bits_);
  static void set_has_is_reached(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_loop_num(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LoopResult::LoopResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.LoopResult)
}
LoopResult::LoopResult(const LoopResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&loop_num_, &from.loop_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_reached_) -
    reinterpret_cast<char*>(&loop_num_)) + sizeof(is_reached_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.LoopResult)
}

void LoopResult::SharedCtor() {
  ::memset(&loop_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_reached_) -
      reinterpret_cast<char*>(&loop_num_)) + sizeof(is_reached_));
}

LoopResult::~LoopResult() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.LoopResult)
  SharedDtor();
}

void LoopResult::SharedDtor() {
}

void LoopResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoopResult& LoopResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoopResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void LoopResult::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.LoopResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&loop_num_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_reached_) -
        reinterpret_cast<char*>(&loop_num_)) + sizeof(is_reached_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LoopResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool is_reached = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is_reached(&has_bits);
          is_reached_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double loop_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_loop_num(&has_bits);
          loop_num_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoopResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.LoopResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool is_reached = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_reached(), target);
  }

  // optional double loop_num = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_loop_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.LoopResult)
  return target;
}

size_t LoopResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.LoopResult)
  size_t total_size = 0;

  // required bool is_reached = 1;
  if (_internal_has_is_reached()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double loop_num = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoopResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.LoopResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LoopResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoopResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.LoopResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.LoopResult)
    MergeFrom(*source);
  }
}

void LoopResult::MergeFrom(const LoopResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.LoopResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      loop_num_ = from.loop_num_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_reached_ = from.is_reached_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoopResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.LoopResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoopResult::CopyFrom(const LoopResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.LoopResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoopResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void LoopResult::InternalSwap(LoopResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(loop_num_, other->loop_num_);
  swap(is_reached_, other->is_reached_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoopResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopicResult::InitAsDefaultInstance() {
}
class TopicResult::_Internal {
 public:
  using HasBits = decltype(std::declval<TopicResult>()._has_bits_);
};

TopicResult::TopicResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.TopicResult)
}
TopicResult::TopicResult(const TopicResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      topic_lack_(from.topic_lack_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.TopicResult)
}

void TopicResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopicResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
}

TopicResult::~TopicResult() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.TopicResult)
  SharedDtor();
}

void TopicResult::SharedDtor() {
}

void TopicResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopicResult& TopicResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopicResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void TopicResult::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.TopicResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_lack_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TopicResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string topic_lack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_topic_lack();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.hdmap.TopicResult.topic_lack");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopicResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.TopicResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string topic_lack = 1;
  for (int i = 0, n = this->_internal_topic_lack_size(); i < n; i++) {
    const auto& s = this->_internal_topic_lack(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.hdmap.TopicResult.topic_lack");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.TopicResult)
  return target;
}

size_t TopicResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.TopicResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string topic_lack = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(topic_lack_.size());
  for (int i = 0, n = topic_lack_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      topic_lack_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.TopicResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopicResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.TopicResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.TopicResult)
    MergeFrom(*source);
  }
}

void TopicResult::MergeFrom(const TopicResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.TopicResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topic_lack_.MergeFrom(from.topic_lack_);
}

void TopicResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.TopicResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicResult::CopyFrom(const TopicResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.TopicResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicResult::IsInitialized() const {
  return true;
}

void TopicResult::InternalSwap(TopicResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  topic_lack_.InternalSwap(&other->topic_lack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrameRate::InitAsDefaultInstance() {
}
class FrameRate::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameRate>()._has_bits_);
  static void set_has_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_expected_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_current_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

FrameRate::FrameRate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.FrameRate)
}
FrameRate::FrameRate(const FrameRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      bad_record_name_(from.bad_record_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_topic()) {
    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  ::memcpy(&expected_rate_, &from.expected_rate_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_rate_) -
    reinterpret_cast<char*>(&expected_rate_)) + sizeof(current_rate_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.FrameRate)
}

void FrameRate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameRate_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&expected_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_rate_) -
      reinterpret_cast<char*>(&expected_rate_)) + sizeof(current_rate_));
}

FrameRate::~FrameRate() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.FrameRate)
  SharedDtor();
}

void FrameRate::SharedDtor() {
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FrameRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameRate& FrameRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameRate_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void FrameRate::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.FrameRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bad_record_name_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    topic_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&expected_rate_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_rate_) -
        reinterpret_cast<char*>(&expected_rate_)) + sizeof(current_rate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FrameRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.hdmap.FrameRate.topic");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double expected_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_expected_rate(&has_bits);
          expected_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double current_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_current_rate(&has_bits);
          current_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string bad_record_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bad_record_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.hdmap.FrameRate.bad_record_name");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameRate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.FrameRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string topic = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.hdmap.FrameRate.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  // optional double expected_rate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_expected_rate(), target);
  }

  // optional double current_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_current_rate(), target);
  }

  // repeated string bad_record_name = 4;
  for (int i = 0, n = this->_internal_bad_record_name_size(); i < n; i++) {
    const auto& s = this->_internal_bad_record_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.hdmap.FrameRate.bad_record_name");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.FrameRate)
  return target;
}

size_t FrameRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.FrameRate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string bad_record_name = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bad_record_name_.size());
  for (int i = 0, n = bad_record_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      bad_record_name_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string topic = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_topic());
    }

    // optional double expected_rate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double current_rate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.FrameRate)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.FrameRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.FrameRate)
    MergeFrom(*source);
  }
}

void FrameRate::MergeFrom(const FrameRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.FrameRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bad_record_name_.MergeFrom(from.bad_record_name_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
    }
    if (cached_has_bits & 0x00000002u) {
      expected_rate_ = from.expected_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      current_rate_ = from.current_rate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FrameRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.FrameRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameRate::CopyFrom(const FrameRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.FrameRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameRate::IsInitialized() const {
  return true;
}

void FrameRate::InternalSwap(FrameRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bad_record_name_.InternalSwap(&other->bad_record_name_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expected_rate_, other->expected_rate_);
  swap(current_rate_, other->current_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VerifyResult::InitAsDefaultInstance() {
  ::apollo::hdmap::_VerifyResult_default_instance_._instance.get_mutable()->topics_ = const_cast< ::apollo::hdmap::TopicResult*>(
      ::apollo::hdmap::TopicResult::internal_default_instance());
}
class VerifyResult::_Internal {
 public:
  using HasBits = decltype(std::declval<VerifyResult>()._has_bits_);
  static const ::apollo::hdmap::TopicResult& topics(const VerifyResult* msg);
  static void set_has_topics(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::hdmap::TopicResult&
VerifyResult::_Internal::topics(const VerifyResult* msg) {
  return *msg->topics_;
}
VerifyResult::VerifyResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.VerifyResult)
}
VerifyResult::VerifyResult(const VerifyResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      rates_(from.rates_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_topics()) {
    topics_ = new ::apollo::hdmap::TopicResult(*from.topics_);
  } else {
    topics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.VerifyResult)
}

void VerifyResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VerifyResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  topics_ = nullptr;
}

VerifyResult::~VerifyResult() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.VerifyResult)
  SharedDtor();
}

void VerifyResult::SharedDtor() {
  if (this != internal_default_instance()) delete topics_;
}

void VerifyResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerifyResult& VerifyResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerifyResult_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void VerifyResult::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.VerifyResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rates_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(topics_ != nullptr);
    topics_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* VerifyResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.TopicResult topics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.FrameRate rates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerifyResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.VerifyResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.TopicResult topics = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::topics(this), target, stream);
  }

  // repeated .apollo.hdmap.FrameRate rates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_rates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.VerifyResult)
  return target;
}

size_t VerifyResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.VerifyResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.FrameRate rates = 2;
  total_size += 1UL * this->_internal_rates_size();
  for (const auto& msg : this->rates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .apollo.hdmap.TopicResult topics = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topics_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.VerifyResult)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerifyResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.VerifyResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.VerifyResult)
    MergeFrom(*source);
  }
}

void VerifyResult::MergeFrom(const VerifyResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.VerifyResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rates_.MergeFrom(from.rates_);
  if (from._internal_has_topics()) {
    _internal_mutable_topics()->::apollo::hdmap::TopicResult::MergeFrom(from._internal_topics());
  }
}

void VerifyResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.VerifyResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyResult::CopyFrom(const VerifyResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.VerifyResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyResult::IsInitialized() const {
  return true;
}

void VerifyResult::InternalSwap(VerifyResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rates_.InternalSwap(&other->rates_);
  swap(topics_, other->topics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelVerifyRequest::InitAsDefaultInstance() {
}
class ChannelVerifyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelVerifyRequest>()._has_bits_);
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_collect_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ChannelVerifyRequest::ChannelVerifyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.ChannelVerifyRequest)
}
ChannelVerifyRequest::ChannelVerifyRequest(const ChannelVerifyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  collect_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_collect_id()) {
    collect_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collect_id_);
  }
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.ChannelVerifyRequest)
}

void ChannelVerifyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelVerifyRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  collect_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cmd_ = 1;
}

ChannelVerifyRequest::~ChannelVerifyRequest() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.ChannelVerifyRequest)
  SharedDtor();
}

void ChannelVerifyRequest::SharedDtor() {
  collect_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelVerifyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelVerifyRequest& ChannelVerifyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelVerifyRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void ChannelVerifyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.ChannelVerifyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      collect_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      path_.ClearNonDefaultToEmptyNoArena();
    }
    cmd_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChannelVerifyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.CmdType cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::CmdType_IsValid(val))) {
            _internal_set_cmd(static_cast<::apollo::hdmap::CmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string collect_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_collect_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.hdmap.ChannelVerifyRequest.collect_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string path = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.hdmap.ChannelVerifyRequest.path");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelVerifyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.ChannelVerifyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.CmdType cmd = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // optional string collect_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_collect_id().data(), static_cast<int>(this->_internal_collect_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.hdmap.ChannelVerifyRequest.collect_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_collect_id(), target);
  }

  // optional string path = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.hdmap.ChannelVerifyRequest.path");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.ChannelVerifyRequest)
  return target;
}

size_t ChannelVerifyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.ChannelVerifyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string collect_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_collect_id());
    }

    // optional string path = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_path());
    }

    // optional .apollo.hdmap.CmdType cmd = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelVerifyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.ChannelVerifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelVerifyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelVerifyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.ChannelVerifyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.ChannelVerifyRequest)
    MergeFrom(*source);
  }
}

void ChannelVerifyRequest::MergeFrom(const ChannelVerifyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.ChannelVerifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      collect_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collect_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.path_);
    }
    if (cached_has_bits & 0x00000004u) {
      cmd_ = from.cmd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelVerifyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.ChannelVerifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelVerifyRequest::CopyFrom(const ChannelVerifyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.ChannelVerifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelVerifyRequest::IsInitialized() const {
  return true;
}

void ChannelVerifyRequest::InternalSwap(ChannelVerifyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  collect_id_.Swap(&other->collect_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  path_.Swap(&other->path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelVerifyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelVerifyResponse::InitAsDefaultInstance() {
  ::apollo::hdmap::_ChannelVerifyResponse_default_instance_._instance.get_mutable()->result_ = const_cast< ::apollo::hdmap::VerifyResult*>(
      ::apollo::hdmap::VerifyResult::internal_default_instance());
}
class ChannelVerifyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ChannelVerifyResponse>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::hdmap::VerifyResult& result(const ChannelVerifyResponse* msg);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::hdmap::VerifyResult&
ChannelVerifyResponse::_Internal::result(const ChannelVerifyResponse* msg) {
  return *msg->result_;
}
ChannelVerifyResponse::ChannelVerifyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.ChannelVerifyResponse)
}
ChannelVerifyResponse::ChannelVerifyResponse(const ChannelVerifyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::apollo::hdmap::VerifyResult(*from.result_);
  } else {
    result_ = nullptr;
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.ChannelVerifyResponse)
}

void ChannelVerifyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelVerifyResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&result_)) + sizeof(code_));
}

ChannelVerifyResponse::~ChannelVerifyResponse() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.ChannelVerifyResponse)
  SharedDtor();
}

void ChannelVerifyResponse::SharedDtor() {
  if (this != internal_default_instance()) delete result_;
}

void ChannelVerifyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelVerifyResponse& ChannelVerifyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelVerifyResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void ChannelVerifyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.ChannelVerifyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(result_ != nullptr);
    result_->Clear();
  }
  code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ChannelVerifyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.ErrorCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::ErrorCode_IsValid(val))) {
            _internal_set_code(static_cast<::apollo::hdmap::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.hdmap.VerifyResult result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelVerifyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.ChannelVerifyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.ErrorCode code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // optional .apollo.hdmap.VerifyResult result = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.ChannelVerifyResponse)
  return target;
}

size_t ChannelVerifyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.ChannelVerifyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.hdmap.VerifyResult result = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_);
    }

    // optional .apollo.hdmap.ErrorCode code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelVerifyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.ChannelVerifyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelVerifyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelVerifyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.ChannelVerifyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.ChannelVerifyResponse)
    MergeFrom(*source);
  }
}

void ChannelVerifyResponse::MergeFrom(const ChannelVerifyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.ChannelVerifyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_result()->::apollo::hdmap::VerifyResult::MergeFrom(from._internal_result());
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelVerifyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.ChannelVerifyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelVerifyResponse::CopyFrom(const ChannelVerifyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.ChannelVerifyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelVerifyResponse::IsInitialized() const {
  return true;
}

void ChannelVerifyResponse::InternalSwap(ChannelVerifyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelVerifyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoopsVerifyRequest::InitAsDefaultInstance() {
}
class LoopsVerifyRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<LoopsVerifyRequest>()._has_bits_);
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LoopsVerifyRequest::LoopsVerifyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.LoopsVerifyRequest)
}
LoopsVerifyRequest::LoopsVerifyRequest(const LoopsVerifyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      range_(from.range_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cmd_, &from.cmd_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&cmd_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.LoopsVerifyRequest)
}

void LoopsVerifyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoopsVerifyRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  cmd_ = 1;
  type_ = 1;
}

LoopsVerifyRequest::~LoopsVerifyRequest() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.LoopsVerifyRequest)
  SharedDtor();
}

void LoopsVerifyRequest::SharedDtor() {
}

void LoopsVerifyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoopsVerifyRequest& LoopsVerifyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoopsVerifyRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void LoopsVerifyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.LoopsVerifyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  range_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    cmd_ = 1;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LoopsVerifyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.CmdType cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::CmdType_IsValid(val))) {
            _internal_set_cmd(static_cast<::apollo::hdmap::CmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.hdmap.DataType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::DataType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::hdmap::DataType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .apollo.hdmap.VerifyRange range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoopsVerifyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.LoopsVerifyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.CmdType cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  // optional .apollo.hdmap.DataType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // repeated .apollo.hdmap.VerifyRange range = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_range_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_range(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.LoopsVerifyRequest)
  return target;
}

size_t LoopsVerifyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.LoopsVerifyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.hdmap.VerifyRange range = 3;
  total_size += 1UL * this->_internal_range_size();
  for (const auto& msg : this->range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.hdmap.CmdType cmd = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd());
    }

    // optional .apollo.hdmap.DataType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoopsVerifyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.LoopsVerifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoopsVerifyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoopsVerifyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.LoopsVerifyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.LoopsVerifyRequest)
    MergeFrom(*source);
  }
}

void LoopsVerifyRequest::MergeFrom(const LoopsVerifyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.LoopsVerifyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  range_.MergeFrom(from.range_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cmd_ = from.cmd_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoopsVerifyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.LoopsVerifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoopsVerifyRequest::CopyFrom(const LoopsVerifyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.LoopsVerifyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoopsVerifyRequest::IsInitialized() const {
  return true;
}

void LoopsVerifyRequest::InternalSwap(LoopsVerifyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  range_.InternalSwap(&other->range_);
  swap(cmd_, other->cmd_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoopsVerifyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoopsVerifyResponse::InitAsDefaultInstance() {
  ::apollo::hdmap::_LoopsVerifyResponse_default_instance_._instance.get_mutable()->loop_result_ = const_cast< ::apollo::hdmap::LoopResult*>(
      ::apollo::hdmap::LoopResult::internal_default_instance());
}
class LoopsVerifyResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<LoopsVerifyResponse>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::hdmap::LoopResult& loop_result(const LoopsVerifyResponse* msg);
  static void set_has_loop_result(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::apollo::hdmap::LoopResult&
LoopsVerifyResponse::_Internal::loop_result(const LoopsVerifyResponse* msg) {
  return *msg->loop_result_;
}
LoopsVerifyResponse::LoopsVerifyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.LoopsVerifyResponse)
}
LoopsVerifyResponse::LoopsVerifyResponse(const LoopsVerifyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_loop_result()) {
    loop_result_ = new ::apollo::hdmap::LoopResult(*from.loop_result_);
  } else {
    loop_result_ = nullptr;
  }
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.LoopsVerifyResponse)
}

void LoopsVerifyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoopsVerifyResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  ::memset(&loop_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&loop_result_)) + sizeof(code_));
}

LoopsVerifyResponse::~LoopsVerifyResponse() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.LoopsVerifyResponse)
  SharedDtor();
}

void LoopsVerifyResponse::SharedDtor() {
  if (this != internal_default_instance()) delete loop_result_;
}

void LoopsVerifyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoopsVerifyResponse& LoopsVerifyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoopsVerifyResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void LoopsVerifyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.LoopsVerifyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(loop_result_ != nullptr);
    loop_result_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&progress_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&code_) -
        reinterpret_cast<char*>(&progress_)) + sizeof(code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LoopsVerifyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.ErrorCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::ErrorCode_IsValid(val))) {
            _internal_set_code(static_cast<::apollo::hdmap::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_progress(&has_bits);
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional .apollo.hdmap.LoopResult loop_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_loop_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoopsVerifyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.LoopsVerifyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.ErrorCode code = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // optional double progress = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_progress(), target);
  }

  // optional .apollo.hdmap.LoopResult loop_result = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::loop_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.LoopsVerifyResponse)
  return target;
}

size_t LoopsVerifyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.LoopsVerifyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .apollo.hdmap.LoopResult loop_result = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *loop_result_);
    }

    // optional double progress = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional .apollo.hdmap.ErrorCode code = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoopsVerifyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.LoopsVerifyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoopsVerifyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoopsVerifyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.LoopsVerifyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.LoopsVerifyResponse)
    MergeFrom(*source);
  }
}

void LoopsVerifyResponse::MergeFrom(const LoopsVerifyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.LoopsVerifyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_loop_result()->::apollo::hdmap::LoopResult::MergeFrom(from._internal_loop_result());
    }
    if (cached_has_bits & 0x00000002u) {
      progress_ = from.progress_;
    }
    if (cached_has_bits & 0x00000004u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LoopsVerifyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.LoopsVerifyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoopsVerifyResponse::CopyFrom(const LoopsVerifyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.LoopsVerifyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoopsVerifyResponse::IsInitialized() const {
  if (_internal_has_loop_result()) {
    if (!loop_result_->IsInitialized()) return false;
  }
  return true;
}

void LoopsVerifyResponse::InternalSwap(LoopsVerifyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(loop_result_, other->loop_result_);
  swap(progress_, other->progress_);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoopsVerifyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DynamicAlignRequest::InitAsDefaultInstance() {
}
class DynamicAlignRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<DynamicAlignRequest>()._has_bits_);
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DynamicAlignRequest::DynamicAlignRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.DynamicAlignRequest)
}
DynamicAlignRequest::DynamicAlignRequest(const DynamicAlignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.DynamicAlignRequest)
}

void DynamicAlignRequest::SharedCtor() {
  cmd_ = 1;
}

DynamicAlignRequest::~DynamicAlignRequest() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.DynamicAlignRequest)
  SharedDtor();
}

void DynamicAlignRequest::SharedDtor() {
}

void DynamicAlignRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DynamicAlignRequest& DynamicAlignRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DynamicAlignRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void DynamicAlignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.DynamicAlignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DynamicAlignRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.CmdType cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::CmdType_IsValid(val))) {
            _internal_set_cmd(static_cast<::apollo::hdmap::CmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DynamicAlignRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.DynamicAlignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.CmdType cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.DynamicAlignRequest)
  return target;
}

size_t DynamicAlignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.DynamicAlignRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.hdmap.CmdType cmd = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicAlignRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.DynamicAlignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicAlignRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DynamicAlignRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.DynamicAlignRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.DynamicAlignRequest)
    MergeFrom(*source);
  }
}

void DynamicAlignRequest::MergeFrom(const DynamicAlignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.DynamicAlignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cmd()) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void DynamicAlignRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.DynamicAlignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicAlignRequest::CopyFrom(const DynamicAlignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.DynamicAlignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicAlignRequest::IsInitialized() const {
  return true;
}

void DynamicAlignRequest::InternalSwap(DynamicAlignRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicAlignRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DynamicAlignResponse::InitAsDefaultInstance() {
}
class DynamicAlignResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<DynamicAlignResponse>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DynamicAlignResponse::DynamicAlignResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.DynamicAlignResponse)
}
DynamicAlignResponse::DynamicAlignResponse(const DynamicAlignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.DynamicAlignResponse)
}

void DynamicAlignResponse::SharedCtor() {
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(code_));
}

DynamicAlignResponse::~DynamicAlignResponse() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.DynamicAlignResponse)
  SharedDtor();
}

void DynamicAlignResponse::SharedDtor() {
}

void DynamicAlignResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DynamicAlignResponse& DynamicAlignResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DynamicAlignResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void DynamicAlignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.DynamicAlignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&progress_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&code_) -
        reinterpret_cast<char*>(&progress_)) + sizeof(code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DynamicAlignResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.ErrorCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::ErrorCode_IsValid(val))) {
            _internal_set_code(static_cast<::apollo::hdmap::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_progress(&has_bits);
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DynamicAlignResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.DynamicAlignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.ErrorCode code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // optional double progress = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.DynamicAlignResponse)
  return target;
}

size_t DynamicAlignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.DynamicAlignResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double progress = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.hdmap.ErrorCode code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DynamicAlignResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.DynamicAlignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicAlignResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DynamicAlignResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.DynamicAlignResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.DynamicAlignResponse)
    MergeFrom(*source);
  }
}

void DynamicAlignResponse::MergeFrom(const DynamicAlignResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.DynamicAlignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      progress_ = from.progress_;
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DynamicAlignResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.DynamicAlignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicAlignResponse::CopyFrom(const DynamicAlignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.DynamicAlignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicAlignResponse::IsInitialized() const {
  return true;
}

void DynamicAlignResponse::InternalSwap(DynamicAlignResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(progress_, other->progress_);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicAlignResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StaticAlignRequest::InitAsDefaultInstance() {
}
class StaticAlignRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<StaticAlignRequest>()._has_bits_);
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StaticAlignRequest::StaticAlignRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.StaticAlignRequest)
}
StaticAlignRequest::StaticAlignRequest(const StaticAlignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.StaticAlignRequest)
}

void StaticAlignRequest::SharedCtor() {
  cmd_ = 1;
}

StaticAlignRequest::~StaticAlignRequest() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.StaticAlignRequest)
  SharedDtor();
}

void StaticAlignRequest::SharedDtor() {
}

void StaticAlignRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StaticAlignRequest& StaticAlignRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StaticAlignRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void StaticAlignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.StaticAlignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StaticAlignRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.CmdType cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::CmdType_IsValid(val))) {
            _internal_set_cmd(static_cast<::apollo::hdmap::CmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StaticAlignRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.StaticAlignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.CmdType cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.StaticAlignRequest)
  return target;
}

size_t StaticAlignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.StaticAlignRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.hdmap.CmdType cmd = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StaticAlignRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.StaticAlignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticAlignRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StaticAlignRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.StaticAlignRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.StaticAlignRequest)
    MergeFrom(*source);
  }
}

void StaticAlignRequest::MergeFrom(const StaticAlignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.StaticAlignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cmd()) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void StaticAlignRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.StaticAlignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticAlignRequest::CopyFrom(const StaticAlignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.StaticAlignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticAlignRequest::IsInitialized() const {
  return true;
}

void StaticAlignRequest::InternalSwap(StaticAlignRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StaticAlignRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StaticAlignResponse::InitAsDefaultInstance() {
}
class StaticAlignResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<StaticAlignResponse>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StaticAlignResponse::StaticAlignResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.StaticAlignResponse)
}
StaticAlignResponse::StaticAlignResponse(const StaticAlignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.StaticAlignResponse)
}

void StaticAlignResponse::SharedCtor() {
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(code_));
}

StaticAlignResponse::~StaticAlignResponse() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.StaticAlignResponse)
  SharedDtor();
}

void StaticAlignResponse::SharedDtor() {
}

void StaticAlignResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StaticAlignResponse& StaticAlignResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StaticAlignResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void StaticAlignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.StaticAlignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&progress_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&code_) -
        reinterpret_cast<char*>(&progress_)) + sizeof(code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StaticAlignResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.ErrorCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::ErrorCode_IsValid(val))) {
            _internal_set_code(static_cast<::apollo::hdmap::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_progress(&has_bits);
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StaticAlignResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.StaticAlignResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.ErrorCode code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // optional double progress = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.StaticAlignResponse)
  return target;
}

size_t StaticAlignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.StaticAlignResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double progress = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.hdmap.ErrorCode code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StaticAlignResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.StaticAlignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticAlignResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StaticAlignResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.StaticAlignResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.StaticAlignResponse)
    MergeFrom(*source);
  }
}

void StaticAlignResponse::MergeFrom(const StaticAlignResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.StaticAlignResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      progress_ = from.progress_;
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void StaticAlignResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.StaticAlignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticAlignResponse::CopyFrom(const StaticAlignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.StaticAlignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticAlignResponse::IsInitialized() const {
  return true;
}

void StaticAlignResponse::InternalSwap(StaticAlignResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(progress_, other->progress_);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StaticAlignResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EightRouteRequest::InitAsDefaultInstance() {
}
class EightRouteRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<EightRouteRequest>()._has_bits_);
  static void set_has_cmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EightRouteRequest::EightRouteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.EightRouteRequest)
}
EightRouteRequest::EightRouteRequest(const EightRouteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cmd_ = from.cmd_;
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.EightRouteRequest)
}

void EightRouteRequest::SharedCtor() {
  cmd_ = 1;
}

EightRouteRequest::~EightRouteRequest() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.EightRouteRequest)
  SharedDtor();
}

void EightRouteRequest::SharedDtor() {
}

void EightRouteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EightRouteRequest& EightRouteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EightRouteRequest_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void EightRouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.EightRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cmd_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EightRouteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.CmdType cmd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::CmdType_IsValid(val))) {
            _internal_set_cmd(static_cast<::apollo::hdmap::CmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EightRouteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.EightRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.CmdType cmd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cmd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.EightRouteRequest)
  return target;
}

size_t EightRouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.EightRouteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .apollo.hdmap.CmdType cmd = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EightRouteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.EightRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EightRouteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EightRouteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.EightRouteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.EightRouteRequest)
    MergeFrom(*source);
  }
}

void EightRouteRequest::MergeFrom(const EightRouteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.EightRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cmd()) {
    _internal_set_cmd(from._internal_cmd());
  }
}

void EightRouteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.EightRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EightRouteRequest::CopyFrom(const EightRouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.EightRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EightRouteRequest::IsInitialized() const {
  return true;
}

void EightRouteRequest::InternalSwap(EightRouteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cmd_, other->cmd_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EightRouteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EightRouteResponse::InitAsDefaultInstance() {
}
class EightRouteResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<EightRouteResponse>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_progress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EightRouteResponse::EightRouteResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:apollo.hdmap.EightRouteResponse)
}
EightRouteResponse::EightRouteResponse(const EightRouteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&code_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(code_));
  // @@protoc_insertion_point(copy_constructor:apollo.hdmap.EightRouteResponse)
}

void EightRouteResponse::SharedCtor() {
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(code_));
}

EightRouteResponse::~EightRouteResponse() {
  // @@protoc_insertion_point(destructor:apollo.hdmap.EightRouteResponse)
  SharedDtor();
}

void EightRouteResponse::SharedDtor() {
}

void EightRouteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EightRouteResponse& EightRouteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EightRouteResponse_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void EightRouteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.hdmap.EightRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&progress_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&code_) -
        reinterpret_cast<char*>(&progress_)) + sizeof(code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* EightRouteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.hdmap.ErrorCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::hdmap::ErrorCode_IsValid(val))) {
            _internal_set_code(static_cast<::apollo::hdmap::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional double progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_progress(&has_bits);
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EightRouteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.hdmap.EightRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.hdmap.ErrorCode code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // optional double progress = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.hdmap.EightRouteResponse)
  return target;
}

size_t EightRouteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.hdmap.EightRouteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double progress = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional .apollo.hdmap.ErrorCode code = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EightRouteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.hdmap.EightRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EightRouteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EightRouteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.hdmap.EightRouteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.hdmap.EightRouteResponse)
    MergeFrom(*source);
  }
}

void EightRouteResponse::MergeFrom(const EightRouteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.hdmap.EightRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      progress_ = from.progress_;
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EightRouteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.hdmap.EightRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EightRouteResponse::CopyFrom(const EightRouteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.hdmap.EightRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EightRouteResponse::IsInitialized() const {
  return true;
}

void EightRouteResponse::InternalSwap(EightRouteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(progress_, other->progress_);
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EightRouteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace hdmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::hdmap::VerifyRange* Arena::CreateMaybeMessage< ::apollo::hdmap::VerifyRange >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::VerifyRange >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::LoopResult* Arena::CreateMaybeMessage< ::apollo::hdmap::LoopResult >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::LoopResult >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::TopicResult* Arena::CreateMaybeMessage< ::apollo::hdmap::TopicResult >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::TopicResult >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::FrameRate* Arena::CreateMaybeMessage< ::apollo::hdmap::FrameRate >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::FrameRate >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::VerifyResult* Arena::CreateMaybeMessage< ::apollo::hdmap::VerifyResult >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::VerifyResult >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::ChannelVerifyRequest* Arena::CreateMaybeMessage< ::apollo::hdmap::ChannelVerifyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::ChannelVerifyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::ChannelVerifyResponse* Arena::CreateMaybeMessage< ::apollo::hdmap::ChannelVerifyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::ChannelVerifyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::LoopsVerifyRequest* Arena::CreateMaybeMessage< ::apollo::hdmap::LoopsVerifyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::LoopsVerifyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::LoopsVerifyResponse* Arena::CreateMaybeMessage< ::apollo::hdmap::LoopsVerifyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::LoopsVerifyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::DynamicAlignRequest* Arena::CreateMaybeMessage< ::apollo::hdmap::DynamicAlignRequest >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::DynamicAlignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::DynamicAlignResponse* Arena::CreateMaybeMessage< ::apollo::hdmap::DynamicAlignResponse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::DynamicAlignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::StaticAlignRequest* Arena::CreateMaybeMessage< ::apollo::hdmap::StaticAlignRequest >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::StaticAlignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::StaticAlignResponse* Arena::CreateMaybeMessage< ::apollo::hdmap::StaticAlignResponse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::StaticAlignResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::EightRouteRequest* Arena::CreateMaybeMessage< ::apollo::hdmap::EightRouteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::EightRouteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::hdmap::EightRouteResponse* Arena::CreateMaybeMessage< ::apollo::hdmap::EightRouteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::apollo::hdmap::EightRouteResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
