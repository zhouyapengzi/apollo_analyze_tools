// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/map/tools/map_datachecker/proto/collection_check_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/map/tools/map_datachecker/proto/collection_error_code.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
namespace apollo {
namespace hdmap {
class ChannelVerifyRequest;
class ChannelVerifyRequestDefaultTypeInternal;
extern ChannelVerifyRequestDefaultTypeInternal _ChannelVerifyRequest_default_instance_;
class ChannelVerifyResponse;
class ChannelVerifyResponseDefaultTypeInternal;
extern ChannelVerifyResponseDefaultTypeInternal _ChannelVerifyResponse_default_instance_;
class DynamicAlignRequest;
class DynamicAlignRequestDefaultTypeInternal;
extern DynamicAlignRequestDefaultTypeInternal _DynamicAlignRequest_default_instance_;
class DynamicAlignResponse;
class DynamicAlignResponseDefaultTypeInternal;
extern DynamicAlignResponseDefaultTypeInternal _DynamicAlignResponse_default_instance_;
class EightRouteRequest;
class EightRouteRequestDefaultTypeInternal;
extern EightRouteRequestDefaultTypeInternal _EightRouteRequest_default_instance_;
class EightRouteResponse;
class EightRouteResponseDefaultTypeInternal;
extern EightRouteResponseDefaultTypeInternal _EightRouteResponse_default_instance_;
class FrameRate;
class FrameRateDefaultTypeInternal;
extern FrameRateDefaultTypeInternal _FrameRate_default_instance_;
class LoopResult;
class LoopResultDefaultTypeInternal;
extern LoopResultDefaultTypeInternal _LoopResult_default_instance_;
class LoopsVerifyRequest;
class LoopsVerifyRequestDefaultTypeInternal;
extern LoopsVerifyRequestDefaultTypeInternal _LoopsVerifyRequest_default_instance_;
class LoopsVerifyResponse;
class LoopsVerifyResponseDefaultTypeInternal;
extern LoopsVerifyResponseDefaultTypeInternal _LoopsVerifyResponse_default_instance_;
class StaticAlignRequest;
class StaticAlignRequestDefaultTypeInternal;
extern StaticAlignRequestDefaultTypeInternal _StaticAlignRequest_default_instance_;
class StaticAlignResponse;
class StaticAlignResponseDefaultTypeInternal;
extern StaticAlignResponseDefaultTypeInternal _StaticAlignResponse_default_instance_;
class TopicResult;
class TopicResultDefaultTypeInternal;
extern TopicResultDefaultTypeInternal _TopicResult_default_instance_;
class VerifyRange;
class VerifyRangeDefaultTypeInternal;
extern VerifyRangeDefaultTypeInternal _VerifyRange_default_instance_;
class VerifyResult;
class VerifyResultDefaultTypeInternal;
extern VerifyResultDefaultTypeInternal _VerifyResult_default_instance_;
}  // namespace hdmap
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::hdmap::ChannelVerifyRequest* Arena::CreateMaybeMessage<::apollo::hdmap::ChannelVerifyRequest>(Arena*);
template<> ::apollo::hdmap::ChannelVerifyResponse* Arena::CreateMaybeMessage<::apollo::hdmap::ChannelVerifyResponse>(Arena*);
template<> ::apollo::hdmap::DynamicAlignRequest* Arena::CreateMaybeMessage<::apollo::hdmap::DynamicAlignRequest>(Arena*);
template<> ::apollo::hdmap::DynamicAlignResponse* Arena::CreateMaybeMessage<::apollo::hdmap::DynamicAlignResponse>(Arena*);
template<> ::apollo::hdmap::EightRouteRequest* Arena::CreateMaybeMessage<::apollo::hdmap::EightRouteRequest>(Arena*);
template<> ::apollo::hdmap::EightRouteResponse* Arena::CreateMaybeMessage<::apollo::hdmap::EightRouteResponse>(Arena*);
template<> ::apollo::hdmap::FrameRate* Arena::CreateMaybeMessage<::apollo::hdmap::FrameRate>(Arena*);
template<> ::apollo::hdmap::LoopResult* Arena::CreateMaybeMessage<::apollo::hdmap::LoopResult>(Arena*);
template<> ::apollo::hdmap::LoopsVerifyRequest* Arena::CreateMaybeMessage<::apollo::hdmap::LoopsVerifyRequest>(Arena*);
template<> ::apollo::hdmap::LoopsVerifyResponse* Arena::CreateMaybeMessage<::apollo::hdmap::LoopsVerifyResponse>(Arena*);
template<> ::apollo::hdmap::StaticAlignRequest* Arena::CreateMaybeMessage<::apollo::hdmap::StaticAlignRequest>(Arena*);
template<> ::apollo::hdmap::StaticAlignResponse* Arena::CreateMaybeMessage<::apollo::hdmap::StaticAlignResponse>(Arena*);
template<> ::apollo::hdmap::TopicResult* Arena::CreateMaybeMessage<::apollo::hdmap::TopicResult>(Arena*);
template<> ::apollo::hdmap::VerifyRange* Arena::CreateMaybeMessage<::apollo::hdmap::VerifyRange>(Arena*);
template<> ::apollo::hdmap::VerifyResult* Arena::CreateMaybeMessage<::apollo::hdmap::VerifyResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace hdmap {

enum CmdType : int {
  START = 1,
  CHECK = 2,
  STOP = 3
};
bool CmdType_IsValid(int value);
constexpr CmdType CmdType_MIN = START;
constexpr CmdType CmdType_MAX = STOP;
constexpr int CmdType_ARRAYSIZE = CmdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdType_descriptor();
template<typename T>
inline const std::string& CmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CmdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CmdType_descriptor(), enum_t_value);
}
inline bool CmdType_Parse(
    const std::string& name, CmdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CmdType>(
    CmdType_descriptor(), name, value);
}
enum DataType : int {
  MAP_MAKING = 1,
  MAP_CHECKOUT = 2
};
bool DataType_IsValid(int value);
constexpr DataType DataType_MIN = MAP_MAKING;
constexpr DataType DataType_MAX = MAP_CHECKOUT;
constexpr int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor();
template<typename T>
inline const std::string& DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DataType_descriptor(), enum_t_value);
}
inline bool DataType_Parse(
    const std::string& name, DataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
// ===================================================================

class VerifyRange :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.VerifyRange) */ {
 public:
  VerifyRange();
  virtual ~VerifyRange();

  VerifyRange(const VerifyRange& from);
  VerifyRange(VerifyRange&& from) noexcept
    : VerifyRange() {
    *this = ::std::move(from);
  }

  inline VerifyRange& operator=(const VerifyRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyRange& operator=(VerifyRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyRange* internal_default_instance() {
    return reinterpret_cast<const VerifyRange*>(
               &_VerifyRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VerifyRange& a, VerifyRange& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyRange* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyRange* New() const final {
    return CreateMaybeMessage<VerifyRange>(nullptr);
  }

  VerifyRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyRange& from);
  void MergeFrom(const VerifyRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.VerifyRange";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto);
    return ::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
  };
  // optional double start_time = 1;
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  double start_time() const;
  void set_start_time(double value);
  private:
  double _internal_start_time() const;
  void _internal_set_start_time(double value);
  public:

  // optional double end_time = 2;
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  double end_time() const;
  void set_end_time(double value);
  private:
  double _internal_end_time() const;
  void _internal_set_end_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.VerifyRange)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double start_time_;
  double end_time_;
  friend struct ::TableStruct_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class LoopResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.LoopResult) */ {
 public:
  LoopResult();
  virtual ~LoopResult();

  LoopResult(const LoopResult& from);
  LoopResult(LoopResult&& from) noexcept
    : LoopResult() {
    *this = ::std::move(from);
  }

  inline LoopResult& operator=(const LoopResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoopResult& operator=(LoopResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoopResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoopResult* internal_default_instance() {
    return reinterpret_cast<const LoopResult*>(
               &_LoopResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoopResult& a, LoopResult& b) {
    a.Swap(&b);
  }
  inline void Swap(LoopResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoopResult* New() const final {
    return CreateMaybeMessage<LoopResult>(nullptr);
  }

  LoopResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoopResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoopResult& from);
  void MergeFrom(const LoopResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoopResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.LoopResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto);
    return ::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoopNumFieldNumber = 2,
    kIsReachedFieldNumber = 1,
  };
  // optional double loop_num = 2;
  bool has_loop_num() const;
  private:
  bool _internal_has_loop_num() const;
  public:
  void clear_loop_num();
  double loop_num() const;
  void set_loop_num(double value);
  private:
  double _internal_loop_num() const;
  void _internal_set_loop_num(double value);
  public:

  // required bool is_reached = 1;
  bool has_is_reached() const;
  private:
  bool _internal_has_is_reached() const;
  public:
  void clear_is_reached();
  bool is_reached() const;
  void set_is_reached(bool value);
  private:
  bool _internal_is_reached() const;
  void _internal_set_is_reached(bool value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.LoopResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double loop_num_;
  bool is_reached_;
  friend struct ::TableStruct_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class TopicResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.TopicResult) */ {
 public:
  TopicResult();
  virtual ~TopicResult();

  TopicResult(const TopicResult& from);
  TopicResult(TopicResult&& from) noexcept
    : TopicResult() {
    *this = ::std::move(from);
  }

  inline TopicResult& operator=(const TopicResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicResult& operator=(TopicResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopicResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicResult* internal_default_instance() {
    return reinterpret_cast<const TopicResult*>(
               &_TopicResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TopicResult& a, TopicResult& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopicResult* New() const final {
    return CreateMaybeMessage<TopicResult>(nullptr);
  }

  TopicResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopicResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopicResult& from);
  void MergeFrom(const TopicResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.TopicResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto);
    return ::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicLackFieldNumber = 1,
  };
  // repeated string topic_lack = 1;
  int topic_lack_size() const;
  private:
  int _internal_topic_lack_size() const;
  public:
  void clear_topic_lack();
  const std::string& topic_lack(int index) const;
  std::string* mutable_topic_lack(int index);
  void set_topic_lack(int index, const std::string& value);
  void set_topic_lack(int index, std::string&& value);
  void set_topic_lack(int index, const char* value);
  void set_topic_lack(int index, const char* value, size_t size);
  std::string* add_topic_lack();
  void add_topic_lack(const std::string& value);
  void add_topic_lack(std::string&& value);
  void add_topic_lack(const char* value);
  void add_topic_lack(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& topic_lack() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_topic_lack();
  private:
  const std::string& _internal_topic_lack(int index) const;
  std::string* _internal_add_topic_lack();
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.TopicResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> topic_lack_;
  friend struct ::TableStruct_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class FrameRate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.FrameRate) */ {
 public:
  FrameRate();
  virtual ~FrameRate();

  FrameRate(const FrameRate& from);
  FrameRate(FrameRate&& from) noexcept
    : FrameRate() {
    *this = ::std::move(from);
  }

  inline FrameRate& operator=(const FrameRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameRate& operator=(FrameRate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameRate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameRate* internal_default_instance() {
    return reinterpret_cast<const FrameRate*>(
               &_FrameRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FrameRate& a, FrameRate& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameRate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameRate* New() const final {
    return CreateMaybeMessage<FrameRate>(nullptr);
  }

  FrameRate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameRate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameRate& from);
  void MergeFrom(const FrameRate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameRate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.FrameRate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto);
    return ::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBadRecordNameFieldNumber = 4,
    kTopicFieldNumber = 1,
    kExpectedRateFieldNumber = 2,
    kCurrentRateFieldNumber = 3,
  };
  // repeated string bad_record_name = 4;
  int bad_record_name_size() const;
  private:
  int _internal_bad_record_name_size() const;
  public:
  void clear_bad_record_name();
  const std::string& bad_record_name(int index) const;
  std::string* mutable_bad_record_name(int index);
  void set_bad_record_name(int index, const std::string& value);
  void set_bad_record_name(int index, std::string&& value);
  void set_bad_record_name(int index, const char* value);
  void set_bad_record_name(int index, const char* value, size_t size);
  std::string* add_bad_record_name();
  void add_bad_record_name(const std::string& value);
  void add_bad_record_name(std::string&& value);
  void add_bad_record_name(const char* value);
  void add_bad_record_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bad_record_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bad_record_name();
  private:
  const std::string& _internal_bad_record_name(int index) const;
  std::string* _internal_add_bad_record_name();
  public:

  // optional string topic = 1;
  bool has_topic() const;
  private:
  bool _internal_has_topic() const;
  public:
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // optional double expected_rate = 2;
  bool has_expected_rate() const;
  private:
  bool _internal_has_expected_rate() const;
  public:
  void clear_expected_rate();
  double expected_rate() const;
  void set_expected_rate(double value);
  private:
  double _internal_expected_rate() const;
  void _internal_set_expected_rate(double value);
  public:

  // optional double current_rate = 3;
  bool has_current_rate() const;
  private:
  bool _internal_has_current_rate() const;
  public:
  void clear_current_rate();
  double current_rate() const;
  void set_current_rate(double value);
  private:
  double _internal_current_rate() const;
  void _internal_set_current_rate(double value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.FrameRate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bad_record_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  double expected_rate_;
  double current_rate_;
  friend struct ::TableStruct_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class VerifyResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.VerifyResult) */ {
 public:
  VerifyResult();
  virtual ~VerifyResult();

  VerifyResult(const VerifyResult& from);
  VerifyResult(VerifyResult&& from) noexcept
    : VerifyResult() {
    *this = ::std::move(from);
  }

  inline VerifyResult& operator=(const VerifyResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyResult& operator=(VerifyResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyResult* internal_default_instance() {
    return reinterpret_cast<const VerifyResult*>(
               &_VerifyResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VerifyResult& a, VerifyResult& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyResult* New() const final {
    return CreateMaybeMessage<VerifyResult>(nullptr);
  }

  VerifyResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyResult& from);
  void MergeFrom(const VerifyResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.VerifyResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto);
    return ::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRatesFieldNumber = 2,
    kTopicsFieldNumber = 1,
  };
  // repeated .apollo.hdmap.FrameRate rates = 2;
  int rates_size() const;
  private:
  int _internal_rates_size() const;
  public:
  void clear_rates();
  ::apollo::hdmap::FrameRate* mutable_rates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::FrameRate >*
      mutable_rates();
  private:
  const ::apollo::hdmap::FrameRate& _internal_rates(int index) const;
  ::apollo::hdmap::FrameRate* _internal_add_rates();
  public:
  const ::apollo::hdmap::FrameRate& rates(int index) const;
  ::apollo::hdmap::FrameRate* add_rates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::FrameRate >&
      rates() const;

  // optional .apollo.hdmap.TopicResult topics = 1;
  bool has_topics() const;
  private:
  bool _internal_has_topics() const;
  public:
  void clear_topics();
  const ::apollo::hdmap::TopicResult& topics() const;
  ::apollo::hdmap::TopicResult* release_topics();
  ::apollo::hdmap::TopicResult* mutable_topics();
  void set_allocated_topics(::apollo::hdmap::TopicResult* topics);
  private:
  const ::apollo::hdmap::TopicResult& _internal_topics() const;
  ::apollo::hdmap::TopicResult* _internal_mutable_topics();
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.VerifyResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::FrameRate > rates_;
  ::apollo::hdmap::TopicResult* topics_;
  friend struct ::TableStruct_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ChannelVerifyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.ChannelVerifyRequest) */ {
 public:
  ChannelVerifyRequest();
  virtual ~ChannelVerifyRequest();

  ChannelVerifyRequest(const ChannelVerifyRequest& from);
  ChannelVerifyRequest(ChannelVerifyRequest&& from) noexcept
    : ChannelVerifyRequest() {
    *this = ::std::move(from);
  }

  inline ChannelVerifyRequest& operator=(const ChannelVerifyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelVerifyRequest& operator=(ChannelVerifyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelVerifyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelVerifyRequest* internal_default_instance() {
    return reinterpret_cast<const ChannelVerifyRequest*>(
               &_ChannelVerifyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChannelVerifyRequest& a, ChannelVerifyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelVerifyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelVerifyRequest* New() const final {
    return CreateMaybeMessage<ChannelVerifyRequest>(nullptr);
  }

  ChannelVerifyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelVerifyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelVerifyRequest& from);
  void MergeFrom(const ChannelVerifyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelVerifyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.ChannelVerifyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto);
    return ::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectIdFieldNumber = 2,
    kPathFieldNumber = 3,
    kCmdFieldNumber = 1,
  };
  // optional string collect_id = 2;
  bool has_collect_id() const;
  private:
  bool _internal_has_collect_id() const;
  public:
  void clear_collect_id();
  const std::string& collect_id() const;
  void set_collect_id(const std::string& value);
  void set_collect_id(std::string&& value);
  void set_collect_id(const char* value);
  void set_collect_id(const char* value, size_t size);
  std::string* mutable_collect_id();
  std::string* release_collect_id();
  void set_allocated_collect_id(std::string* collect_id);
  private:
  const std::string& _internal_collect_id() const;
  void _internal_set_collect_id(const std::string& value);
  std::string* _internal_mutable_collect_id();
  public:

  // optional string path = 3;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  void set_path(const std::string& value);
  void set_path(std::string&& value);
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  std::string* mutable_path();
  std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // optional .apollo.hdmap.CmdType cmd = 1;
  bool has_cmd() const;
  private:
  bool _internal_has_cmd() const;
  public:
  void clear_cmd();
  ::apollo::hdmap::CmdType cmd() const;
  void set_cmd(::apollo::hdmap::CmdType value);
  private:
  ::apollo::hdmap::CmdType _internal_cmd() const;
  void _internal_set_cmd(::apollo::hdmap::CmdType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.ChannelVerifyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collect_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  int cmd_;
  friend struct ::TableStruct_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ChannelVerifyResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.ChannelVerifyResponse) */ {
 public:
  ChannelVerifyResponse();
  virtual ~ChannelVerifyResponse();

  ChannelVerifyResponse(const ChannelVerifyResponse& from);
  ChannelVerifyResponse(ChannelVerifyResponse&& from) noexcept
    : ChannelVerifyResponse() {
    *this = ::std::move(from);
  }

  inline ChannelVerifyResponse& operator=(const ChannelVerifyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelVerifyResponse& operator=(ChannelVerifyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelVerifyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelVerifyResponse* internal_default_instance() {
    return reinterpret_cast<const ChannelVerifyResponse*>(
               &_ChannelVerifyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChannelVerifyResponse& a, ChannelVerifyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelVerifyResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelVerifyResponse* New() const final {
    return CreateMaybeMessage<ChannelVerifyResponse>(nullptr);
  }

  ChannelVerifyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelVerifyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelVerifyResponse& from);
  void MergeFrom(const ChannelVerifyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelVerifyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.ChannelVerifyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto);
    return ::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // optional .apollo.hdmap.VerifyResult result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::apollo::hdmap::VerifyResult& result() const;
  ::apollo::hdmap::VerifyResult* release_result();
  ::apollo::hdmap::VerifyResult* mutable_result();
  void set_allocated_result(::apollo::hdmap::VerifyResult* result);
  private:
  const ::apollo::hdmap::VerifyResult& _internal_result() const;
  ::apollo::hdmap::VerifyResult* _internal_mutable_result();
  public:

  // optional .apollo.hdmap.ErrorCode code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::apollo::hdmap::ErrorCode code() const;
  void set_code(::apollo::hdmap::ErrorCode value);
  private:
  ::apollo::hdmap::ErrorCode _internal_code() const;
  void _internal_set_code(::apollo::hdmap::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.ChannelVerifyResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::hdmap::VerifyResult* result_;
  int code_;
  friend struct ::TableStruct_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class LoopsVerifyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.LoopsVerifyRequest) */ {
 public:
  LoopsVerifyRequest();
  virtual ~LoopsVerifyRequest();

  LoopsVerifyRequest(const LoopsVerifyRequest& from);
  LoopsVerifyRequest(LoopsVerifyRequest&& from) noexcept
    : LoopsVerifyRequest() {
    *this = ::std::move(from);
  }

  inline LoopsVerifyRequest& operator=(const LoopsVerifyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoopsVerifyRequest& operator=(LoopsVerifyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoopsVerifyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoopsVerifyRequest* internal_default_instance() {
    return reinterpret_cast<const LoopsVerifyRequest*>(
               &_LoopsVerifyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LoopsVerifyRequest& a, LoopsVerifyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoopsVerifyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoopsVerifyRequest* New() const final {
    return CreateMaybeMessage<LoopsVerifyRequest>(nullptr);
  }

  LoopsVerifyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoopsVerifyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoopsVerifyRequest& from);
  void MergeFrom(const LoopsVerifyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoopsVerifyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.LoopsVerifyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto);
    return ::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 3,
    kCmdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .apollo.hdmap.VerifyRange range = 3;
  int range_size() const;
  private:
  int _internal_range_size() const;
  public:
  void clear_range();
  ::apollo::hdmap::VerifyRange* mutable_range(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::VerifyRange >*
      mutable_range();
  private:
  const ::apollo::hdmap::VerifyRange& _internal_range(int index) const;
  ::apollo::hdmap::VerifyRange* _internal_add_range();
  public:
  const ::apollo::hdmap::VerifyRange& range(int index) const;
  ::apollo::hdmap::VerifyRange* add_range();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::VerifyRange >&
      range() const;

  // optional .apollo.hdmap.CmdType cmd = 1;
  bool has_cmd() const;
  private:
  bool _internal_has_cmd() const;
  public:
  void clear_cmd();
  ::apollo::hdmap::CmdType cmd() const;
  void set_cmd(::apollo::hdmap::CmdType value);
  private:
  ::apollo::hdmap::CmdType _internal_cmd() const;
  void _internal_set_cmd(::apollo::hdmap::CmdType value);
  public:

  // optional .apollo.hdmap.DataType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::apollo::hdmap::DataType type() const;
  void set_type(::apollo::hdmap::DataType value);
  private:
  ::apollo::hdmap::DataType _internal_type() const;
  void _internal_set_type(::apollo::hdmap::DataType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.LoopsVerifyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::VerifyRange > range_;
  int cmd_;
  int type_;
  friend struct ::TableStruct_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class LoopsVerifyResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.LoopsVerifyResponse) */ {
 public:
  LoopsVerifyResponse();
  virtual ~LoopsVerifyResponse();

  LoopsVerifyResponse(const LoopsVerifyResponse& from);
  LoopsVerifyResponse(LoopsVerifyResponse&& from) noexcept
    : LoopsVerifyResponse() {
    *this = ::std::move(from);
  }

  inline LoopsVerifyResponse& operator=(const LoopsVerifyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoopsVerifyResponse& operator=(LoopsVerifyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoopsVerifyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoopsVerifyResponse* internal_default_instance() {
    return reinterpret_cast<const LoopsVerifyResponse*>(
               &_LoopsVerifyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LoopsVerifyResponse& a, LoopsVerifyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoopsVerifyResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoopsVerifyResponse* New() const final {
    return CreateMaybeMessage<LoopsVerifyResponse>(nullptr);
  }

  LoopsVerifyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoopsVerifyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoopsVerifyResponse& from);
  void MergeFrom(const LoopsVerifyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoopsVerifyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.LoopsVerifyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto);
    return ::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoopResultFieldNumber = 3,
    kProgressFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // optional .apollo.hdmap.LoopResult loop_result = 3;
  bool has_loop_result() const;
  private:
  bool _internal_has_loop_result() const;
  public:
  void clear_loop_result();
  const ::apollo::hdmap::LoopResult& loop_result() const;
  ::apollo::hdmap::LoopResult* release_loop_result();
  ::apollo::hdmap::LoopResult* mutable_loop_result();
  void set_allocated_loop_result(::apollo::hdmap::LoopResult* loop_result);
  private:
  const ::apollo::hdmap::LoopResult& _internal_loop_result() const;
  ::apollo::hdmap::LoopResult* _internal_mutable_loop_result();
  public:

  // optional double progress = 2;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  double progress() const;
  void set_progress(double value);
  private:
  double _internal_progress() const;
  void _internal_set_progress(double value);
  public:

  // optional .apollo.hdmap.ErrorCode code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::apollo::hdmap::ErrorCode code() const;
  void set_code(::apollo::hdmap::ErrorCode value);
  private:
  ::apollo::hdmap::ErrorCode _internal_code() const;
  void _internal_set_code(::apollo::hdmap::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.LoopsVerifyResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::apollo::hdmap::LoopResult* loop_result_;
  double progress_;
  int code_;
  friend struct ::TableStruct_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class DynamicAlignRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.DynamicAlignRequest) */ {
 public:
  DynamicAlignRequest();
  virtual ~DynamicAlignRequest();

  DynamicAlignRequest(const DynamicAlignRequest& from);
  DynamicAlignRequest(DynamicAlignRequest&& from) noexcept
    : DynamicAlignRequest() {
    *this = ::std::move(from);
  }

  inline DynamicAlignRequest& operator=(const DynamicAlignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicAlignRequest& operator=(DynamicAlignRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DynamicAlignRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynamicAlignRequest* internal_default_instance() {
    return reinterpret_cast<const DynamicAlignRequest*>(
               &_DynamicAlignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DynamicAlignRequest& a, DynamicAlignRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicAlignRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DynamicAlignRequest* New() const final {
    return CreateMaybeMessage<DynamicAlignRequest>(nullptr);
  }

  DynamicAlignRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DynamicAlignRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DynamicAlignRequest& from);
  void MergeFrom(const DynamicAlignRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicAlignRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.DynamicAlignRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto);
    return ::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 1,
  };
  // optional .apollo.hdmap.CmdType cmd = 1;
  bool has_cmd() const;
  private:
  bool _internal_has_cmd() const;
  public:
  void clear_cmd();
  ::apollo::hdmap::CmdType cmd() const;
  void set_cmd(::apollo::hdmap::CmdType value);
  private:
  ::apollo::hdmap::CmdType _internal_cmd() const;
  void _internal_set_cmd(::apollo::hdmap::CmdType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.DynamicAlignRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int cmd_;
  friend struct ::TableStruct_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class DynamicAlignResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.DynamicAlignResponse) */ {
 public:
  DynamicAlignResponse();
  virtual ~DynamicAlignResponse();

  DynamicAlignResponse(const DynamicAlignResponse& from);
  DynamicAlignResponse(DynamicAlignResponse&& from) noexcept
    : DynamicAlignResponse() {
    *this = ::std::move(from);
  }

  inline DynamicAlignResponse& operator=(const DynamicAlignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicAlignResponse& operator=(DynamicAlignResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DynamicAlignResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DynamicAlignResponse* internal_default_instance() {
    return reinterpret_cast<const DynamicAlignResponse*>(
               &_DynamicAlignResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DynamicAlignResponse& a, DynamicAlignResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicAlignResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DynamicAlignResponse* New() const final {
    return CreateMaybeMessage<DynamicAlignResponse>(nullptr);
  }

  DynamicAlignResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DynamicAlignResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DynamicAlignResponse& from);
  void MergeFrom(const DynamicAlignResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicAlignResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.DynamicAlignResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto);
    return ::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgressFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // optional double progress = 2;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  double progress() const;
  void set_progress(double value);
  private:
  double _internal_progress() const;
  void _internal_set_progress(double value);
  public:

  // optional .apollo.hdmap.ErrorCode code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::apollo::hdmap::ErrorCode code() const;
  void set_code(::apollo::hdmap::ErrorCode value);
  private:
  ::apollo::hdmap::ErrorCode _internal_code() const;
  void _internal_set_code(::apollo::hdmap::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.DynamicAlignResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double progress_;
  int code_;
  friend struct ::TableStruct_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class StaticAlignRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.StaticAlignRequest) */ {
 public:
  StaticAlignRequest();
  virtual ~StaticAlignRequest();

  StaticAlignRequest(const StaticAlignRequest& from);
  StaticAlignRequest(StaticAlignRequest&& from) noexcept
    : StaticAlignRequest() {
    *this = ::std::move(from);
  }

  inline StaticAlignRequest& operator=(const StaticAlignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StaticAlignRequest& operator=(StaticAlignRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StaticAlignRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaticAlignRequest* internal_default_instance() {
    return reinterpret_cast<const StaticAlignRequest*>(
               &_StaticAlignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StaticAlignRequest& a, StaticAlignRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StaticAlignRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StaticAlignRequest* New() const final {
    return CreateMaybeMessage<StaticAlignRequest>(nullptr);
  }

  StaticAlignRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StaticAlignRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StaticAlignRequest& from);
  void MergeFrom(const StaticAlignRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticAlignRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.StaticAlignRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto);
    return ::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 1,
  };
  // optional .apollo.hdmap.CmdType cmd = 1;
  bool has_cmd() const;
  private:
  bool _internal_has_cmd() const;
  public:
  void clear_cmd();
  ::apollo::hdmap::CmdType cmd() const;
  void set_cmd(::apollo::hdmap::CmdType value);
  private:
  ::apollo::hdmap::CmdType _internal_cmd() const;
  void _internal_set_cmd(::apollo::hdmap::CmdType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.StaticAlignRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int cmd_;
  friend struct ::TableStruct_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class StaticAlignResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.StaticAlignResponse) */ {
 public:
  StaticAlignResponse();
  virtual ~StaticAlignResponse();

  StaticAlignResponse(const StaticAlignResponse& from);
  StaticAlignResponse(StaticAlignResponse&& from) noexcept
    : StaticAlignResponse() {
    *this = ::std::move(from);
  }

  inline StaticAlignResponse& operator=(const StaticAlignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StaticAlignResponse& operator=(StaticAlignResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StaticAlignResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaticAlignResponse* internal_default_instance() {
    return reinterpret_cast<const StaticAlignResponse*>(
               &_StaticAlignResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(StaticAlignResponse& a, StaticAlignResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StaticAlignResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StaticAlignResponse* New() const final {
    return CreateMaybeMessage<StaticAlignResponse>(nullptr);
  }

  StaticAlignResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StaticAlignResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StaticAlignResponse& from);
  void MergeFrom(const StaticAlignResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticAlignResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.StaticAlignResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto);
    return ::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgressFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // optional double progress = 2;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  double progress() const;
  void set_progress(double value);
  private:
  double _internal_progress() const;
  void _internal_set_progress(double value);
  public:

  // optional .apollo.hdmap.ErrorCode code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::apollo::hdmap::ErrorCode code() const;
  void set_code(::apollo::hdmap::ErrorCode value);
  private:
  ::apollo::hdmap::ErrorCode _internal_code() const;
  void _internal_set_code(::apollo::hdmap::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.StaticAlignResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double progress_;
  int code_;
  friend struct ::TableStruct_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class EightRouteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.EightRouteRequest) */ {
 public:
  EightRouteRequest();
  virtual ~EightRouteRequest();

  EightRouteRequest(const EightRouteRequest& from);
  EightRouteRequest(EightRouteRequest&& from) noexcept
    : EightRouteRequest() {
    *this = ::std::move(from);
  }

  inline EightRouteRequest& operator=(const EightRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EightRouteRequest& operator=(EightRouteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EightRouteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EightRouteRequest* internal_default_instance() {
    return reinterpret_cast<const EightRouteRequest*>(
               &_EightRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EightRouteRequest& a, EightRouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EightRouteRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EightRouteRequest* New() const final {
    return CreateMaybeMessage<EightRouteRequest>(nullptr);
  }

  EightRouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EightRouteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EightRouteRequest& from);
  void MergeFrom(const EightRouteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EightRouteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.EightRouteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto);
    return ::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdFieldNumber = 1,
  };
  // optional .apollo.hdmap.CmdType cmd = 1;
  bool has_cmd() const;
  private:
  bool _internal_has_cmd() const;
  public:
  void clear_cmd();
  ::apollo::hdmap::CmdType cmd() const;
  void set_cmd(::apollo::hdmap::CmdType value);
  private:
  ::apollo::hdmap::CmdType _internal_cmd() const;
  void _internal_set_cmd(::apollo::hdmap::CmdType value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.EightRouteRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int cmd_;
  friend struct ::TableStruct_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class EightRouteResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.hdmap.EightRouteResponse) */ {
 public:
  EightRouteResponse();
  virtual ~EightRouteResponse();

  EightRouteResponse(const EightRouteResponse& from);
  EightRouteResponse(EightRouteResponse&& from) noexcept
    : EightRouteResponse() {
    *this = ::std::move(from);
  }

  inline EightRouteResponse& operator=(const EightRouteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EightRouteResponse& operator=(EightRouteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EightRouteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EightRouteResponse* internal_default_instance() {
    return reinterpret_cast<const EightRouteResponse*>(
               &_EightRouteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(EightRouteResponse& a, EightRouteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EightRouteResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EightRouteResponse* New() const final {
    return CreateMaybeMessage<EightRouteResponse>(nullptr);
  }

  EightRouteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EightRouteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EightRouteResponse& from);
  void MergeFrom(const EightRouteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EightRouteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.hdmap.EightRouteResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto);
    return ::descriptor_table_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgressFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // optional double progress = 2;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  double progress() const;
  void set_progress(double value);
  private:
  double _internal_progress() const;
  void _internal_set_progress(double value);
  public:

  // optional .apollo.hdmap.ErrorCode code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::apollo::hdmap::ErrorCode code() const;
  void set_code(::apollo::hdmap::ErrorCode value);
  private:
  ::apollo::hdmap::ErrorCode _internal_code() const;
  void _internal_set_code(::apollo::hdmap::ErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.hdmap.EightRouteResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double progress_;
  int code_;
  friend struct ::TableStruct_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VerifyRange

// optional double start_time = 1;
inline bool VerifyRange::_internal_has_start_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VerifyRange::has_start_time() const {
  return _internal_has_start_time();
}
inline void VerifyRange::clear_start_time() {
  start_time_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double VerifyRange::_internal_start_time() const {
  return start_time_;
}
inline double VerifyRange::start_time() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.VerifyRange.start_time)
  return _internal_start_time();
}
inline void VerifyRange::_internal_set_start_time(double value) {
  _has_bits_[0] |= 0x00000001u;
  start_time_ = value;
}
inline void VerifyRange::set_start_time(double value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.VerifyRange.start_time)
}

// optional double end_time = 2;
inline bool VerifyRange::_internal_has_end_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VerifyRange::has_end_time() const {
  return _internal_has_end_time();
}
inline void VerifyRange::clear_end_time() {
  end_time_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double VerifyRange::_internal_end_time() const {
  return end_time_;
}
inline double VerifyRange::end_time() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.VerifyRange.end_time)
  return _internal_end_time();
}
inline void VerifyRange::_internal_set_end_time(double value) {
  _has_bits_[0] |= 0x00000002u;
  end_time_ = value;
}
inline void VerifyRange::set_end_time(double value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.VerifyRange.end_time)
}

// -------------------------------------------------------------------

// LoopResult

// required bool is_reached = 1;
inline bool LoopResult::_internal_has_is_reached() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoopResult::has_is_reached() const {
  return _internal_has_is_reached();
}
inline void LoopResult::clear_is_reached() {
  is_reached_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LoopResult::_internal_is_reached() const {
  return is_reached_;
}
inline bool LoopResult::is_reached() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.LoopResult.is_reached)
  return _internal_is_reached();
}
inline void LoopResult::_internal_set_is_reached(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_reached_ = value;
}
inline void LoopResult::set_is_reached(bool value) {
  _internal_set_is_reached(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.LoopResult.is_reached)
}

// optional double loop_num = 2;
inline bool LoopResult::_internal_has_loop_num() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoopResult::has_loop_num() const {
  return _internal_has_loop_num();
}
inline void LoopResult::clear_loop_num() {
  loop_num_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double LoopResult::_internal_loop_num() const {
  return loop_num_;
}
inline double LoopResult::loop_num() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.LoopResult.loop_num)
  return _internal_loop_num();
}
inline void LoopResult::_internal_set_loop_num(double value) {
  _has_bits_[0] |= 0x00000001u;
  loop_num_ = value;
}
inline void LoopResult::set_loop_num(double value) {
  _internal_set_loop_num(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.LoopResult.loop_num)
}

// -------------------------------------------------------------------

// TopicResult

// repeated string topic_lack = 1;
inline int TopicResult::_internal_topic_lack_size() const {
  return topic_lack_.size();
}
inline int TopicResult::topic_lack_size() const {
  return _internal_topic_lack_size();
}
inline void TopicResult::clear_topic_lack() {
  topic_lack_.Clear();
}
inline std::string* TopicResult::add_topic_lack() {
  // @@protoc_insertion_point(field_add_mutable:apollo.hdmap.TopicResult.topic_lack)
  return _internal_add_topic_lack();
}
inline const std::string& TopicResult::_internal_topic_lack(int index) const {
  return topic_lack_.Get(index);
}
inline const std::string& TopicResult::topic_lack(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.TopicResult.topic_lack)
  return _internal_topic_lack(index);
}
inline std::string* TopicResult::mutable_topic_lack(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.TopicResult.topic_lack)
  return topic_lack_.Mutable(index);
}
inline void TopicResult::set_topic_lack(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.hdmap.TopicResult.topic_lack)
  topic_lack_.Mutable(index)->assign(value);
}
inline void TopicResult::set_topic_lack(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.hdmap.TopicResult.topic_lack)
  topic_lack_.Mutable(index)->assign(std::move(value));
}
inline void TopicResult::set_topic_lack(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topic_lack_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.hdmap.TopicResult.topic_lack)
}
inline void TopicResult::set_topic_lack(int index, const char* value, size_t size) {
  topic_lack_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.hdmap.TopicResult.topic_lack)
}
inline std::string* TopicResult::_internal_add_topic_lack() {
  return topic_lack_.Add();
}
inline void TopicResult::add_topic_lack(const std::string& value) {
  topic_lack_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.hdmap.TopicResult.topic_lack)
}
inline void TopicResult::add_topic_lack(std::string&& value) {
  topic_lack_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.hdmap.TopicResult.topic_lack)
}
inline void TopicResult::add_topic_lack(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  topic_lack_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.hdmap.TopicResult.topic_lack)
}
inline void TopicResult::add_topic_lack(const char* value, size_t size) {
  topic_lack_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.hdmap.TopicResult.topic_lack)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TopicResult::topic_lack() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.TopicResult.topic_lack)
  return topic_lack_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TopicResult::mutable_topic_lack() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.TopicResult.topic_lack)
  return &topic_lack_;
}

// -------------------------------------------------------------------

// FrameRate

// optional string topic = 1;
inline bool FrameRate::_internal_has_topic() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FrameRate::has_topic() const {
  return _internal_has_topic();
}
inline void FrameRate::clear_topic() {
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FrameRate::topic() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.FrameRate.topic)
  return _internal_topic();
}
inline void FrameRate::set_topic(const std::string& value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.FrameRate.topic)
}
inline std::string* FrameRate::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.FrameRate.topic)
  return _internal_mutable_topic();
}
inline const std::string& FrameRate::_internal_topic() const {
  return topic_.GetNoArena();
}
inline void FrameRate::_internal_set_topic(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FrameRate::set_topic(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  topic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.hdmap.FrameRate.topic)
}
inline void FrameRate::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.hdmap.FrameRate.topic)
}
inline void FrameRate::set_topic(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.hdmap.FrameRate.topic)
}
inline std::string* FrameRate::_internal_mutable_topic() {
  _has_bits_[0] |= 0x00000001u;
  return topic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FrameRate::release_topic() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.FrameRate.topic)
  if (!_internal_has_topic()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return topic_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FrameRate::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  topic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.FrameRate.topic)
}

// optional double expected_rate = 2;
inline bool FrameRate::_internal_has_expected_rate() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FrameRate::has_expected_rate() const {
  return _internal_has_expected_rate();
}
inline void FrameRate::clear_expected_rate() {
  expected_rate_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double FrameRate::_internal_expected_rate() const {
  return expected_rate_;
}
inline double FrameRate::expected_rate() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.FrameRate.expected_rate)
  return _internal_expected_rate();
}
inline void FrameRate::_internal_set_expected_rate(double value) {
  _has_bits_[0] |= 0x00000002u;
  expected_rate_ = value;
}
inline void FrameRate::set_expected_rate(double value) {
  _internal_set_expected_rate(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.FrameRate.expected_rate)
}

// optional double current_rate = 3;
inline bool FrameRate::_internal_has_current_rate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FrameRate::has_current_rate() const {
  return _internal_has_current_rate();
}
inline void FrameRate::clear_current_rate() {
  current_rate_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double FrameRate::_internal_current_rate() const {
  return current_rate_;
}
inline double FrameRate::current_rate() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.FrameRate.current_rate)
  return _internal_current_rate();
}
inline void FrameRate::_internal_set_current_rate(double value) {
  _has_bits_[0] |= 0x00000004u;
  current_rate_ = value;
}
inline void FrameRate::set_current_rate(double value) {
  _internal_set_current_rate(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.FrameRate.current_rate)
}

// repeated string bad_record_name = 4;
inline int FrameRate::_internal_bad_record_name_size() const {
  return bad_record_name_.size();
}
inline int FrameRate::bad_record_name_size() const {
  return _internal_bad_record_name_size();
}
inline void FrameRate::clear_bad_record_name() {
  bad_record_name_.Clear();
}
inline std::string* FrameRate::add_bad_record_name() {
  // @@protoc_insertion_point(field_add_mutable:apollo.hdmap.FrameRate.bad_record_name)
  return _internal_add_bad_record_name();
}
inline const std::string& FrameRate::_internal_bad_record_name(int index) const {
  return bad_record_name_.Get(index);
}
inline const std::string& FrameRate::bad_record_name(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.FrameRate.bad_record_name)
  return _internal_bad_record_name(index);
}
inline std::string* FrameRate::mutable_bad_record_name(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.FrameRate.bad_record_name)
  return bad_record_name_.Mutable(index);
}
inline void FrameRate::set_bad_record_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:apollo.hdmap.FrameRate.bad_record_name)
  bad_record_name_.Mutable(index)->assign(value);
}
inline void FrameRate::set_bad_record_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:apollo.hdmap.FrameRate.bad_record_name)
  bad_record_name_.Mutable(index)->assign(std::move(value));
}
inline void FrameRate::set_bad_record_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bad_record_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:apollo.hdmap.FrameRate.bad_record_name)
}
inline void FrameRate::set_bad_record_name(int index, const char* value, size_t size) {
  bad_record_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:apollo.hdmap.FrameRate.bad_record_name)
}
inline std::string* FrameRate::_internal_add_bad_record_name() {
  return bad_record_name_.Add();
}
inline void FrameRate::add_bad_record_name(const std::string& value) {
  bad_record_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:apollo.hdmap.FrameRate.bad_record_name)
}
inline void FrameRate::add_bad_record_name(std::string&& value) {
  bad_record_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:apollo.hdmap.FrameRate.bad_record_name)
}
inline void FrameRate::add_bad_record_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bad_record_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:apollo.hdmap.FrameRate.bad_record_name)
}
inline void FrameRate::add_bad_record_name(const char* value, size_t size) {
  bad_record_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:apollo.hdmap.FrameRate.bad_record_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FrameRate::bad_record_name() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.FrameRate.bad_record_name)
  return bad_record_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FrameRate::mutable_bad_record_name() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.FrameRate.bad_record_name)
  return &bad_record_name_;
}

// -------------------------------------------------------------------

// VerifyResult

// optional .apollo.hdmap.TopicResult topics = 1;
inline bool VerifyResult::_internal_has_topics() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || topics_ != nullptr);
  return value;
}
inline bool VerifyResult::has_topics() const {
  return _internal_has_topics();
}
inline void VerifyResult::clear_topics() {
  if (topics_ != nullptr) topics_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::hdmap::TopicResult& VerifyResult::_internal_topics() const {
  const ::apollo::hdmap::TopicResult* p = topics_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::hdmap::TopicResult*>(
      &::apollo::hdmap::_TopicResult_default_instance_);
}
inline const ::apollo::hdmap::TopicResult& VerifyResult::topics() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.VerifyResult.topics)
  return _internal_topics();
}
inline ::apollo::hdmap::TopicResult* VerifyResult::release_topics() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.VerifyResult.topics)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::TopicResult* temp = topics_;
  topics_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::TopicResult* VerifyResult::_internal_mutable_topics() {
  _has_bits_[0] |= 0x00000001u;
  if (topics_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::TopicResult>(GetArenaNoVirtual());
    topics_ = p;
  }
  return topics_;
}
inline ::apollo::hdmap::TopicResult* VerifyResult::mutable_topics() {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.VerifyResult.topics)
  return _internal_mutable_topics();
}
inline void VerifyResult::set_allocated_topics(::apollo::hdmap::TopicResult* topics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete topics_;
  }
  if (topics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      topics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topics, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  topics_ = topics;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.VerifyResult.topics)
}

// repeated .apollo.hdmap.FrameRate rates = 2;
inline int VerifyResult::_internal_rates_size() const {
  return rates_.size();
}
inline int VerifyResult::rates_size() const {
  return _internal_rates_size();
}
inline void VerifyResult::clear_rates() {
  rates_.Clear();
}
inline ::apollo::hdmap::FrameRate* VerifyResult::mutable_rates(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.VerifyResult.rates)
  return rates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::FrameRate >*
VerifyResult::mutable_rates() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.VerifyResult.rates)
  return &rates_;
}
inline const ::apollo::hdmap::FrameRate& VerifyResult::_internal_rates(int index) const {
  return rates_.Get(index);
}
inline const ::apollo::hdmap::FrameRate& VerifyResult::rates(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.VerifyResult.rates)
  return _internal_rates(index);
}
inline ::apollo::hdmap::FrameRate* VerifyResult::_internal_add_rates() {
  return rates_.Add();
}
inline ::apollo::hdmap::FrameRate* VerifyResult::add_rates() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.VerifyResult.rates)
  return _internal_add_rates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::FrameRate >&
VerifyResult::rates() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.VerifyResult.rates)
  return rates_;
}

// -------------------------------------------------------------------

// ChannelVerifyRequest

// optional .apollo.hdmap.CmdType cmd = 1;
inline bool ChannelVerifyRequest::_internal_has_cmd() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChannelVerifyRequest::has_cmd() const {
  return _internal_has_cmd();
}
inline void ChannelVerifyRequest::clear_cmd() {
  cmd_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::hdmap::CmdType ChannelVerifyRequest::_internal_cmd() const {
  return static_cast< ::apollo::hdmap::CmdType >(cmd_);
}
inline ::apollo::hdmap::CmdType ChannelVerifyRequest::cmd() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.ChannelVerifyRequest.cmd)
  return _internal_cmd();
}
inline void ChannelVerifyRequest::_internal_set_cmd(::apollo::hdmap::CmdType value) {
  assert(::apollo::hdmap::CmdType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  cmd_ = value;
}
inline void ChannelVerifyRequest::set_cmd(::apollo::hdmap::CmdType value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.ChannelVerifyRequest.cmd)
}

// optional string collect_id = 2;
inline bool ChannelVerifyRequest::_internal_has_collect_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChannelVerifyRequest::has_collect_id() const {
  return _internal_has_collect_id();
}
inline void ChannelVerifyRequest::clear_collect_id() {
  collect_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChannelVerifyRequest::collect_id() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.ChannelVerifyRequest.collect_id)
  return _internal_collect_id();
}
inline void ChannelVerifyRequest::set_collect_id(const std::string& value) {
  _internal_set_collect_id(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.ChannelVerifyRequest.collect_id)
}
inline std::string* ChannelVerifyRequest::mutable_collect_id() {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.ChannelVerifyRequest.collect_id)
  return _internal_mutable_collect_id();
}
inline const std::string& ChannelVerifyRequest::_internal_collect_id() const {
  return collect_id_.GetNoArena();
}
inline void ChannelVerifyRequest::_internal_set_collect_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  collect_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelVerifyRequest::set_collect_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  collect_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.hdmap.ChannelVerifyRequest.collect_id)
}
inline void ChannelVerifyRequest::set_collect_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  collect_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.hdmap.ChannelVerifyRequest.collect_id)
}
inline void ChannelVerifyRequest::set_collect_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  collect_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.hdmap.ChannelVerifyRequest.collect_id)
}
inline std::string* ChannelVerifyRequest::_internal_mutable_collect_id() {
  _has_bits_[0] |= 0x00000001u;
  return collect_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelVerifyRequest::release_collect_id() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.ChannelVerifyRequest.collect_id)
  if (!_internal_has_collect_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return collect_id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelVerifyRequest::set_allocated_collect_id(std::string* collect_id) {
  if (collect_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  collect_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collect_id);
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ChannelVerifyRequest.collect_id)
}

// optional string path = 3;
inline bool ChannelVerifyRequest::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChannelVerifyRequest::has_path() const {
  return _internal_has_path();
}
inline void ChannelVerifyRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChannelVerifyRequest::path() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.ChannelVerifyRequest.path)
  return _internal_path();
}
inline void ChannelVerifyRequest::set_path(const std::string& value) {
  _internal_set_path(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.ChannelVerifyRequest.path)
}
inline std::string* ChannelVerifyRequest::mutable_path() {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.ChannelVerifyRequest.path)
  return _internal_mutable_path();
}
inline const std::string& ChannelVerifyRequest::_internal_path() const {
  return path_.GetNoArena();
}
inline void ChannelVerifyRequest::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelVerifyRequest::set_path(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:apollo.hdmap.ChannelVerifyRequest.path)
}
inline void ChannelVerifyRequest::set_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.hdmap.ChannelVerifyRequest.path)
}
inline void ChannelVerifyRequest::set_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.hdmap.ChannelVerifyRequest.path)
}
inline std::string* ChannelVerifyRequest::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000002u;
  return path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelVerifyRequest::release_path() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.ChannelVerifyRequest.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return path_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelVerifyRequest::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ChannelVerifyRequest.path)
}

// -------------------------------------------------------------------

// ChannelVerifyResponse

// optional .apollo.hdmap.ErrorCode code = 1;
inline bool ChannelVerifyResponse::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChannelVerifyResponse::has_code() const {
  return _internal_has_code();
}
inline void ChannelVerifyResponse::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::hdmap::ErrorCode ChannelVerifyResponse::_internal_code() const {
  return static_cast< ::apollo::hdmap::ErrorCode >(code_);
}
inline ::apollo::hdmap::ErrorCode ChannelVerifyResponse::code() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.ChannelVerifyResponse.code)
  return _internal_code();
}
inline void ChannelVerifyResponse::_internal_set_code(::apollo::hdmap::ErrorCode value) {
  assert(::apollo::hdmap::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  code_ = value;
}
inline void ChannelVerifyResponse::set_code(::apollo::hdmap::ErrorCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.ChannelVerifyResponse.code)
}

// optional .apollo.hdmap.VerifyResult result = 2;
inline bool ChannelVerifyResponse::_internal_has_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || result_ != nullptr);
  return value;
}
inline bool ChannelVerifyResponse::has_result() const {
  return _internal_has_result();
}
inline void ChannelVerifyResponse::clear_result() {
  if (result_ != nullptr) result_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::hdmap::VerifyResult& ChannelVerifyResponse::_internal_result() const {
  const ::apollo::hdmap::VerifyResult* p = result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::hdmap::VerifyResult*>(
      &::apollo::hdmap::_VerifyResult_default_instance_);
}
inline const ::apollo::hdmap::VerifyResult& ChannelVerifyResponse::result() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.ChannelVerifyResponse.result)
  return _internal_result();
}
inline ::apollo::hdmap::VerifyResult* ChannelVerifyResponse::release_result() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.ChannelVerifyResponse.result)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::VerifyResult* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::VerifyResult* ChannelVerifyResponse::_internal_mutable_result() {
  _has_bits_[0] |= 0x00000001u;
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::VerifyResult>(GetArenaNoVirtual());
    result_ = p;
  }
  return result_;
}
inline ::apollo::hdmap::VerifyResult* ChannelVerifyResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.ChannelVerifyResponse.result)
  return _internal_mutable_result();
}
inline void ChannelVerifyResponse::set_allocated_result(::apollo::hdmap::VerifyResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.ChannelVerifyResponse.result)
}

// -------------------------------------------------------------------

// LoopsVerifyRequest

// optional .apollo.hdmap.CmdType cmd = 1;
inline bool LoopsVerifyRequest::_internal_has_cmd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoopsVerifyRequest::has_cmd() const {
  return _internal_has_cmd();
}
inline void LoopsVerifyRequest::clear_cmd() {
  cmd_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::hdmap::CmdType LoopsVerifyRequest::_internal_cmd() const {
  return static_cast< ::apollo::hdmap::CmdType >(cmd_);
}
inline ::apollo::hdmap::CmdType LoopsVerifyRequest::cmd() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.LoopsVerifyRequest.cmd)
  return _internal_cmd();
}
inline void LoopsVerifyRequest::_internal_set_cmd(::apollo::hdmap::CmdType value) {
  assert(::apollo::hdmap::CmdType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  cmd_ = value;
}
inline void LoopsVerifyRequest::set_cmd(::apollo::hdmap::CmdType value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.LoopsVerifyRequest.cmd)
}

// optional .apollo.hdmap.DataType type = 2;
inline bool LoopsVerifyRequest::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoopsVerifyRequest::has_type() const {
  return _internal_has_type();
}
inline void LoopsVerifyRequest::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::hdmap::DataType LoopsVerifyRequest::_internal_type() const {
  return static_cast< ::apollo::hdmap::DataType >(type_);
}
inline ::apollo::hdmap::DataType LoopsVerifyRequest::type() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.LoopsVerifyRequest.type)
  return _internal_type();
}
inline void LoopsVerifyRequest::_internal_set_type(::apollo::hdmap::DataType value) {
  assert(::apollo::hdmap::DataType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void LoopsVerifyRequest::set_type(::apollo::hdmap::DataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.LoopsVerifyRequest.type)
}

// repeated .apollo.hdmap.VerifyRange range = 3;
inline int LoopsVerifyRequest::_internal_range_size() const {
  return range_.size();
}
inline int LoopsVerifyRequest::range_size() const {
  return _internal_range_size();
}
inline void LoopsVerifyRequest::clear_range() {
  range_.Clear();
}
inline ::apollo::hdmap::VerifyRange* LoopsVerifyRequest::mutable_range(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.LoopsVerifyRequest.range)
  return range_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::VerifyRange >*
LoopsVerifyRequest::mutable_range() {
  // @@protoc_insertion_point(field_mutable_list:apollo.hdmap.LoopsVerifyRequest.range)
  return &range_;
}
inline const ::apollo::hdmap::VerifyRange& LoopsVerifyRequest::_internal_range(int index) const {
  return range_.Get(index);
}
inline const ::apollo::hdmap::VerifyRange& LoopsVerifyRequest::range(int index) const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.LoopsVerifyRequest.range)
  return _internal_range(index);
}
inline ::apollo::hdmap::VerifyRange* LoopsVerifyRequest::_internal_add_range() {
  return range_.Add();
}
inline ::apollo::hdmap::VerifyRange* LoopsVerifyRequest::add_range() {
  // @@protoc_insertion_point(field_add:apollo.hdmap.LoopsVerifyRequest.range)
  return _internal_add_range();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::hdmap::VerifyRange >&
LoopsVerifyRequest::range() const {
  // @@protoc_insertion_point(field_list:apollo.hdmap.LoopsVerifyRequest.range)
  return range_;
}

// -------------------------------------------------------------------

// LoopsVerifyResponse

// optional .apollo.hdmap.ErrorCode code = 1;
inline bool LoopsVerifyResponse::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoopsVerifyResponse::has_code() const {
  return _internal_has_code();
}
inline void LoopsVerifyResponse::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::apollo::hdmap::ErrorCode LoopsVerifyResponse::_internal_code() const {
  return static_cast< ::apollo::hdmap::ErrorCode >(code_);
}
inline ::apollo::hdmap::ErrorCode LoopsVerifyResponse::code() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.LoopsVerifyResponse.code)
  return _internal_code();
}
inline void LoopsVerifyResponse::_internal_set_code(::apollo::hdmap::ErrorCode value) {
  assert(::apollo::hdmap::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  code_ = value;
}
inline void LoopsVerifyResponse::set_code(::apollo::hdmap::ErrorCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.LoopsVerifyResponse.code)
}

// optional double progress = 2;
inline bool LoopsVerifyResponse::_internal_has_progress() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoopsVerifyResponse::has_progress() const {
  return _internal_has_progress();
}
inline void LoopsVerifyResponse::clear_progress() {
  progress_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double LoopsVerifyResponse::_internal_progress() const {
  return progress_;
}
inline double LoopsVerifyResponse::progress() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.LoopsVerifyResponse.progress)
  return _internal_progress();
}
inline void LoopsVerifyResponse::_internal_set_progress(double value) {
  _has_bits_[0] |= 0x00000002u;
  progress_ = value;
}
inline void LoopsVerifyResponse::set_progress(double value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.LoopsVerifyResponse.progress)
}

// optional .apollo.hdmap.LoopResult loop_result = 3;
inline bool LoopsVerifyResponse::_internal_has_loop_result() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || loop_result_ != nullptr);
  return value;
}
inline bool LoopsVerifyResponse::has_loop_result() const {
  return _internal_has_loop_result();
}
inline void LoopsVerifyResponse::clear_loop_result() {
  if (loop_result_ != nullptr) loop_result_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::apollo::hdmap::LoopResult& LoopsVerifyResponse::_internal_loop_result() const {
  const ::apollo::hdmap::LoopResult* p = loop_result_;
  return p != nullptr ? *p : *reinterpret_cast<const ::apollo::hdmap::LoopResult*>(
      &::apollo::hdmap::_LoopResult_default_instance_);
}
inline const ::apollo::hdmap::LoopResult& LoopsVerifyResponse::loop_result() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.LoopsVerifyResponse.loop_result)
  return _internal_loop_result();
}
inline ::apollo::hdmap::LoopResult* LoopsVerifyResponse::release_loop_result() {
  // @@protoc_insertion_point(field_release:apollo.hdmap.LoopsVerifyResponse.loop_result)
  _has_bits_[0] &= ~0x00000001u;
  ::apollo::hdmap::LoopResult* temp = loop_result_;
  loop_result_ = nullptr;
  return temp;
}
inline ::apollo::hdmap::LoopResult* LoopsVerifyResponse::_internal_mutable_loop_result() {
  _has_bits_[0] |= 0x00000001u;
  if (loop_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::hdmap::LoopResult>(GetArenaNoVirtual());
    loop_result_ = p;
  }
  return loop_result_;
}
inline ::apollo::hdmap::LoopResult* LoopsVerifyResponse::mutable_loop_result() {
  // @@protoc_insertion_point(field_mutable:apollo.hdmap.LoopsVerifyResponse.loop_result)
  return _internal_mutable_loop_result();
}
inline void LoopsVerifyResponse::set_allocated_loop_result(::apollo::hdmap::LoopResult* loop_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete loop_result_;
  }
  if (loop_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      loop_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loop_result, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  loop_result_ = loop_result;
  // @@protoc_insertion_point(field_set_allocated:apollo.hdmap.LoopsVerifyResponse.loop_result)
}

// -------------------------------------------------------------------

// DynamicAlignRequest

// optional .apollo.hdmap.CmdType cmd = 1;
inline bool DynamicAlignRequest::_internal_has_cmd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DynamicAlignRequest::has_cmd() const {
  return _internal_has_cmd();
}
inline void DynamicAlignRequest::clear_cmd() {
  cmd_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::hdmap::CmdType DynamicAlignRequest::_internal_cmd() const {
  return static_cast< ::apollo::hdmap::CmdType >(cmd_);
}
inline ::apollo::hdmap::CmdType DynamicAlignRequest::cmd() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.DynamicAlignRequest.cmd)
  return _internal_cmd();
}
inline void DynamicAlignRequest::_internal_set_cmd(::apollo::hdmap::CmdType value) {
  assert(::apollo::hdmap::CmdType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  cmd_ = value;
}
inline void DynamicAlignRequest::set_cmd(::apollo::hdmap::CmdType value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.DynamicAlignRequest.cmd)
}

// -------------------------------------------------------------------

// DynamicAlignResponse

// optional .apollo.hdmap.ErrorCode code = 1;
inline bool DynamicAlignResponse::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DynamicAlignResponse::has_code() const {
  return _internal_has_code();
}
inline void DynamicAlignResponse::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::hdmap::ErrorCode DynamicAlignResponse::_internal_code() const {
  return static_cast< ::apollo::hdmap::ErrorCode >(code_);
}
inline ::apollo::hdmap::ErrorCode DynamicAlignResponse::code() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.DynamicAlignResponse.code)
  return _internal_code();
}
inline void DynamicAlignResponse::_internal_set_code(::apollo::hdmap::ErrorCode value) {
  assert(::apollo::hdmap::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  code_ = value;
}
inline void DynamicAlignResponse::set_code(::apollo::hdmap::ErrorCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.DynamicAlignResponse.code)
}

// optional double progress = 2;
inline bool DynamicAlignResponse::_internal_has_progress() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DynamicAlignResponse::has_progress() const {
  return _internal_has_progress();
}
inline void DynamicAlignResponse::clear_progress() {
  progress_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double DynamicAlignResponse::_internal_progress() const {
  return progress_;
}
inline double DynamicAlignResponse::progress() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.DynamicAlignResponse.progress)
  return _internal_progress();
}
inline void DynamicAlignResponse::_internal_set_progress(double value) {
  _has_bits_[0] |= 0x00000001u;
  progress_ = value;
}
inline void DynamicAlignResponse::set_progress(double value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.DynamicAlignResponse.progress)
}

// -------------------------------------------------------------------

// StaticAlignRequest

// optional .apollo.hdmap.CmdType cmd = 1;
inline bool StaticAlignRequest::_internal_has_cmd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StaticAlignRequest::has_cmd() const {
  return _internal_has_cmd();
}
inline void StaticAlignRequest::clear_cmd() {
  cmd_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::hdmap::CmdType StaticAlignRequest::_internal_cmd() const {
  return static_cast< ::apollo::hdmap::CmdType >(cmd_);
}
inline ::apollo::hdmap::CmdType StaticAlignRequest::cmd() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.StaticAlignRequest.cmd)
  return _internal_cmd();
}
inline void StaticAlignRequest::_internal_set_cmd(::apollo::hdmap::CmdType value) {
  assert(::apollo::hdmap::CmdType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  cmd_ = value;
}
inline void StaticAlignRequest::set_cmd(::apollo::hdmap::CmdType value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.StaticAlignRequest.cmd)
}

// -------------------------------------------------------------------

// StaticAlignResponse

// optional .apollo.hdmap.ErrorCode code = 1;
inline bool StaticAlignResponse::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StaticAlignResponse::has_code() const {
  return _internal_has_code();
}
inline void StaticAlignResponse::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::hdmap::ErrorCode StaticAlignResponse::_internal_code() const {
  return static_cast< ::apollo::hdmap::ErrorCode >(code_);
}
inline ::apollo::hdmap::ErrorCode StaticAlignResponse::code() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.StaticAlignResponse.code)
  return _internal_code();
}
inline void StaticAlignResponse::_internal_set_code(::apollo::hdmap::ErrorCode value) {
  assert(::apollo::hdmap::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  code_ = value;
}
inline void StaticAlignResponse::set_code(::apollo::hdmap::ErrorCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.StaticAlignResponse.code)
}

// optional double progress = 2;
inline bool StaticAlignResponse::_internal_has_progress() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StaticAlignResponse::has_progress() const {
  return _internal_has_progress();
}
inline void StaticAlignResponse::clear_progress() {
  progress_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double StaticAlignResponse::_internal_progress() const {
  return progress_;
}
inline double StaticAlignResponse::progress() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.StaticAlignResponse.progress)
  return _internal_progress();
}
inline void StaticAlignResponse::_internal_set_progress(double value) {
  _has_bits_[0] |= 0x00000001u;
  progress_ = value;
}
inline void StaticAlignResponse::set_progress(double value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.StaticAlignResponse.progress)
}

// -------------------------------------------------------------------

// EightRouteRequest

// optional .apollo.hdmap.CmdType cmd = 1;
inline bool EightRouteRequest::_internal_has_cmd() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EightRouteRequest::has_cmd() const {
  return _internal_has_cmd();
}
inline void EightRouteRequest::clear_cmd() {
  cmd_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::apollo::hdmap::CmdType EightRouteRequest::_internal_cmd() const {
  return static_cast< ::apollo::hdmap::CmdType >(cmd_);
}
inline ::apollo::hdmap::CmdType EightRouteRequest::cmd() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.EightRouteRequest.cmd)
  return _internal_cmd();
}
inline void EightRouteRequest::_internal_set_cmd(::apollo::hdmap::CmdType value) {
  assert(::apollo::hdmap::CmdType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  cmd_ = value;
}
inline void EightRouteRequest::set_cmd(::apollo::hdmap::CmdType value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.EightRouteRequest.cmd)
}

// -------------------------------------------------------------------

// EightRouteResponse

// optional .apollo.hdmap.ErrorCode code = 1;
inline bool EightRouteResponse::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EightRouteResponse::has_code() const {
  return _internal_has_code();
}
inline void EightRouteResponse::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::apollo::hdmap::ErrorCode EightRouteResponse::_internal_code() const {
  return static_cast< ::apollo::hdmap::ErrorCode >(code_);
}
inline ::apollo::hdmap::ErrorCode EightRouteResponse::code() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.EightRouteResponse.code)
  return _internal_code();
}
inline void EightRouteResponse::_internal_set_code(::apollo::hdmap::ErrorCode value) {
  assert(::apollo::hdmap::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  code_ = value;
}
inline void EightRouteResponse::set_code(::apollo::hdmap::ErrorCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.EightRouteResponse.code)
}

// optional double progress = 2;
inline bool EightRouteResponse::_internal_has_progress() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EightRouteResponse::has_progress() const {
  return _internal_has_progress();
}
inline void EightRouteResponse::clear_progress() {
  progress_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double EightRouteResponse::_internal_progress() const {
  return progress_;
}
inline double EightRouteResponse::progress() const {
  // @@protoc_insertion_point(field_get:apollo.hdmap.EightRouteResponse.progress)
  return _internal_progress();
}
inline void EightRouteResponse::_internal_set_progress(double value) {
  _has_bits_[0] |= 0x00000001u;
  progress_ = value;
}
inline void EightRouteResponse::set_progress(double value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:apollo.hdmap.EightRouteResponse.progress)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace hdmap
}  // namespace apollo

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::apollo::hdmap::CmdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::hdmap::CmdType>() {
  return ::apollo::hdmap::CmdType_descriptor();
}
template <> struct is_proto_enum< ::apollo::hdmap::DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::apollo::hdmap::DataType>() {
  return ::apollo::hdmap::DataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fmap_2ftools_2fmap_5fdatachecker_2fproto_2fcollection_5fcheck_5fmessage_2eproto
